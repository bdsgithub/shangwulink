<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Qiniu.Fakes</name>
    </assembly>
    <members>
        <member name="T:Global.Fakes.ShimQiniuCSharpSDK">
            <summary>QiniuCSharpSDK 的填充码类型</summary>
        </member>
        <member name="M:Global.Fakes.ShimQiniuCSharpSDK.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Global.Fakes.ShimQiniuCSharpSDK.#ctor(QiniuCSharpSDK)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Global.Fakes.ShimQiniuCSharpSDK.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:Global.Fakes.ShimQiniuCSharpSDK.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Global.Fakes.ShimQiniuCSharpSDK.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Global.Fakes.ShimQiniuCSharpSDK.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Global.Fakes.ShimQiniuCSharpSDK.Constructor">
            <summary>设置 QiniuCSharpSDK.QiniuCSharpSDK() 的 填充码</summary>
        </member>
        <member name="T:Global.Fakes.StubQiniuCSharpSDK">
            <summary>QiniuCSharpSDK 的存根类型</summary>
        </member>
        <member name="M:Global.Fakes.StubQiniuCSharpSDK.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Global.Fakes.StubQiniuCSharpSDK.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Global.Fakes.StubQiniuCSharpSDK.InitializeStub">
            <summary>初始化 type StubQiniuCSharpSDK 的新实例</summary>
        </member>
        <member name="P:Global.Fakes.StubQiniuCSharpSDK.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Global.Fakes.StubQiniuCSharpSDK.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.Delegates.QiniuDelegates">
            <summary>包含用于 Qiniu 的存根和填充码的自定义委托</summary>
        </member>
        <member name="T:Qiniu.CDN.Fakes.ShimBandWidthData">
            <summary>Qiniu.CDN.BandWidthData 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimBandWidthData.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimBandWidthData.#ctor(Qiniu.CDN.BandWidthData)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.CDN.Fakes.ShimBandWidthData.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimBandWidthData.AllInstances.ChinaGet">
            <summary>设置 BandWidthData.get_China() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimBandWidthData.AllInstances.ChinaSetListOfUInt64">
            <summary>设置 BandWidthData.set_China(List`1&lt;UInt64&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimBandWidthData.AllInstances.OverseaGet">
            <summary>设置 BandWidthData.get_Oversea() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimBandWidthData.AllInstances.OverseaSetListOfUInt64">
            <summary>设置 BandWidthData.set_Oversea(List`1&lt;UInt64&gt; value) 的 填充码</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimBandWidthData.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimBandWidthData.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimBandWidthData.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimBandWidthData.ChinaGet">
            <summary>设置 BandWidthData.get_China() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimBandWidthData.ChinaSetListOfUInt64">
            <summary>设置 BandWidthData.set_China(List`1&lt;UInt64&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimBandWidthData.Constructor">
            <summary>设置 BandWidthData.BandWidthData() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimBandWidthData.OverseaGet">
            <summary>设置 BandWidthData.get_Oversea() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimBandWidthData.OverseaSetListOfUInt64">
            <summary>设置 BandWidthData.set_Oversea(List`1&lt;UInt64&gt; value) 的 填充码</summary>
        </member>
        <member name="T:Qiniu.CDN.Fakes.ShimBandwidthInfo">
            <summary>Qiniu.CDN.BandwidthInfo 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimBandwidthInfo.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimBandwidthInfo.#ctor(Qiniu.CDN.BandwidthInfo)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.CDN.Fakes.ShimBandwidthInfo.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimBandwidthInfo.AllInstances.CodeGet">
            <summary>设置 BandwidthInfo.get_Code() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimBandwidthInfo.AllInstances.CodeSetInt32">
            <summary>设置 BandwidthInfo.set_Code(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimBandwidthInfo.AllInstances.DataGet">
            <summary>设置 BandwidthInfo.get_Data() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimBandwidthInfo.AllInstances.DataSetDictionaryOfStringBandWidthData">
            <summary>设置 BandwidthInfo.set_Data(Dictionary`2&lt;String,BandWidthData&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimBandwidthInfo.AllInstances.ErrorGet">
            <summary>设置 BandwidthInfo.get_Error() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimBandwidthInfo.AllInstances.ErrorSetString">
            <summary>设置 BandwidthInfo.set_Error(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimBandwidthInfo.AllInstances.TimeGet">
            <summary>设置 BandwidthInfo.get_Time() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimBandwidthInfo.AllInstances.TimeSetListOfString">
            <summary>设置 BandwidthInfo.set_Time(List`1&lt;String&gt; value) 的 填充码</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimBandwidthInfo.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimBandwidthInfo.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimBandwidthInfo.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimBandwidthInfo.CodeGet">
            <summary>设置 BandwidthInfo.get_Code() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimBandwidthInfo.CodeSetInt32">
            <summary>设置 BandwidthInfo.set_Code(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimBandwidthInfo.Constructor">
            <summary>设置 BandwidthInfo.BandwidthInfo() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimBandwidthInfo.DataGet">
            <summary>设置 BandwidthInfo.get_Data() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimBandwidthInfo.DataSetDictionaryOfStringBandWidthData">
            <summary>设置 BandwidthInfo.set_Data(Dictionary`2&lt;String,BandWidthData&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimBandwidthInfo.ErrorGet">
            <summary>设置 BandwidthInfo.get_Error() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimBandwidthInfo.ErrorSetString">
            <summary>设置 BandwidthInfo.set_Error(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimBandwidthInfo.TimeGet">
            <summary>设置 BandwidthInfo.get_Time() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimBandwidthInfo.TimeSetListOfString">
            <summary>设置 BandwidthInfo.set_Time(List`1&lt;String&gt; value) 的 填充码</summary>
        </member>
        <member name="T:Qiniu.CDN.Fakes.ShimBandwidthRequest">
            <summary>Qiniu.CDN.BandwidthRequest 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimBandwidthRequest.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimBandwidthRequest.#ctor(Qiniu.CDN.BandwidthRequest)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.CDN.Fakes.ShimBandwidthRequest.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimBandwidthRequest.AllInstances.DomainsGet">
            <summary>设置 BandwidthRequest.get_Domains() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimBandwidthRequest.AllInstances.DomainsSetString">
            <summary>设置 BandwidthRequest.set_Domains(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimBandwidthRequest.AllInstances.EndDateGet">
            <summary>设置 BandwidthRequest.get_EndDate() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimBandwidthRequest.AllInstances.EndDateSetString">
            <summary>设置 BandwidthRequest.set_EndDate(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimBandwidthRequest.AllInstances.GranularityGet">
            <summary>设置 BandwidthRequest.get_Granularity() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimBandwidthRequest.AllInstances.GranularitySetString">
            <summary>设置 BandwidthRequest.set_Granularity(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimBandwidthRequest.AllInstances.StartDateGet">
            <summary>设置 BandwidthRequest.get_StartDate() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimBandwidthRequest.AllInstances.StartDateSetString">
            <summary>设置 BandwidthRequest.set_StartDate(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimBandwidthRequest.AllInstances.ToJsonStr">
            <summary>设置 BandwidthRequest.ToJsonStr() 的 填充码</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimBandwidthRequest.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimBandwidthRequest.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimBandwidthRequest.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimBandwidthRequest.Constructor">
            <summary>设置 BandwidthRequest.BandwidthRequest() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimBandwidthRequest.ConstructorStringStringStringString">
            <summary>设置 BandwidthRequest.BandwidthRequest(String startDate, String endDate, String granularity, String domains) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimBandwidthRequest.DomainsGet">
            <summary>设置 BandwidthRequest.get_Domains() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimBandwidthRequest.DomainsSetString">
            <summary>设置 BandwidthRequest.set_Domains(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimBandwidthRequest.EndDateGet">
            <summary>设置 BandwidthRequest.get_EndDate() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimBandwidthRequest.EndDateSetString">
            <summary>设置 BandwidthRequest.set_EndDate(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimBandwidthRequest.GranularityGet">
            <summary>设置 BandwidthRequest.get_Granularity() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimBandwidthRequest.GranularitySetString">
            <summary>设置 BandwidthRequest.set_Granularity(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimBandwidthRequest.StartDateGet">
            <summary>设置 BandwidthRequest.get_StartDate() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimBandwidthRequest.StartDateSetString">
            <summary>设置 BandwidthRequest.set_StartDate(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimBandwidthRequest.ToJsonStr">
            <summary>设置 BandwidthRequest.ToJsonStr() 的 填充码</summary>
        </member>
        <member name="T:Qiniu.CDN.Fakes.ShimBandwidthResult">
            <summary>Qiniu.CDN.BandwidthResult 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimBandwidthResult.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimBandwidthResult.#ctor(Qiniu.CDN.BandwidthResult)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.CDN.Fakes.ShimBandwidthResult.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimBandwidthResult.AllInstances.ResultGet">
            <summary>设置 BandwidthResult.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimBandwidthResult.AllInstances.ToString01">
            <summary>设置 BandwidthResult.ToString() 的 填充码</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimBandwidthResult.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimBandwidthResult.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimBandwidthResult.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimBandwidthResult.Constructor">
            <summary>设置 BandwidthResult.BandwidthResult() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimBandwidthResult.ResultGet">
            <summary>设置 BandwidthResult.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimBandwidthResult.ToString">
            <summary>设置 BandwidthResult.ToString() 的 填充码</summary>
        </member>
        <member name="T:Qiniu.CDN.Fakes.ShimCdnManager">
            <summary>Qiniu.CDN.CdnManager 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimCdnManager.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimCdnManager.#ctor(Qiniu.CDN.CdnManager)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.CDN.Fakes.ShimCdnManager.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimCdnManager.AllInstances.GetBandwidthDataStringArrayStringStringString">
            <summary>设置 CdnManager.GetBandwidthData(String[] domains, String startDate, String endDate, String granularity) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimCdnManager.AllInstances.GetCdnLogListStringArrayString">
            <summary>设置 CdnManager.GetCdnLogList(String[] domains, String day) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimCdnManager.AllInstances.GetFluxDataStringArrayStringStringString">
            <summary>设置 CdnManager.GetFluxData(String[] domains, String startDate, String endDate, String granularity) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimCdnManager.AllInstances.PrefetchUrlsStringArray">
            <summary>设置 CdnManager.PrefetchUrls(String[] urls) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimCdnManager.AllInstances.RefreshDirsStringArray">
            <summary>设置 CdnManager.RefreshDirs(String[] dirs) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimCdnManager.AllInstances.RefreshUrlsAndDirsStringArrayStringArray">
            <summary>设置 CdnManager.RefreshUrlsAndDirs(String[] urls, String[] dirs) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimCdnManager.AllInstances.RefreshUrlsStringArray">
            <summary>设置 CdnManager.RefreshUrls(String[] urls) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimCdnManager.AllInstances.bandwidthEntry">
            <summary>设置 CdnManager.bandwidthEntry() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimCdnManager.AllInstances.fluxEntry">
            <summary>设置 CdnManager.fluxEntry() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimCdnManager.AllInstances.logListEntry">
            <summary>设置 CdnManager.logListEntry() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimCdnManager.AllInstances.prefetchEntry">
            <summary>设置 CdnManager.prefetchEntry() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimCdnManager.AllInstances.refreshEntry">
            <summary>设置 CdnManager.refreshEntry() 的 填充码</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimCdnManager.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimCdnManager.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimCdnManager.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimCdnManager.ConstructorMac">
            <summary>设置 CdnManager.CdnManager(Mac mac) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimCdnManager.CreateTimestampAntiLeechUrlStringStringStringStringInt32">
            <summary>设置 CdnManager.CreateTimestampAntiLeechUrl(String host, String fileName, String query, String encryptKey, Int32 expireInSeconds) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimCdnManager.GetBandwidthDataStringArrayStringStringString">
            <summary>设置 CdnManager.GetBandwidthData(String[] domains, String startDate, String endDate, String granularity) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimCdnManager.GetCdnLogListStringArrayString">
            <summary>设置 CdnManager.GetCdnLogList(String[] domains, String day) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimCdnManager.GetFluxDataStringArrayStringStringString">
            <summary>设置 CdnManager.GetFluxData(String[] domains, String startDate, String endDate, String granularity) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimCdnManager.PrefetchUrlsStringArray">
            <summary>设置 CdnManager.PrefetchUrls(String[] urls) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimCdnManager.RefreshDirsStringArray">
            <summary>设置 CdnManager.RefreshDirs(String[] dirs) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimCdnManager.RefreshUrlsAndDirsStringArrayStringArray">
            <summary>设置 CdnManager.RefreshUrlsAndDirs(String[] urls, String[] dirs) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimCdnManager.RefreshUrlsStringArray">
            <summary>设置 CdnManager.RefreshUrls(String[] urls) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimCdnManager.bandwidthEntry">
            <summary>设置 CdnManager.bandwidthEntry() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimCdnManager.fluxEntry">
            <summary>设置 CdnManager.fluxEntry() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimCdnManager.logListEntry">
            <summary>设置 CdnManager.logListEntry() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimCdnManager.prefetchEntry">
            <summary>设置 CdnManager.prefetchEntry() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimCdnManager.refreshEntry">
            <summary>设置 CdnManager.refreshEntry() 的 填充码</summary>
        </member>
        <member name="T:Qiniu.CDN.Fakes.ShimFluxInfo">
            <summary>Qiniu.CDN.FluxInfo 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimFluxInfo.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimFluxInfo.#ctor(Qiniu.CDN.FluxInfo)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.CDN.Fakes.ShimFluxInfo.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimFluxInfo.AllInstances.CodeGet">
            <summary>设置 FluxInfo.get_Code() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimFluxInfo.AllInstances.CodeSetInt32">
            <summary>设置 FluxInfo.set_Code(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimFluxInfo.AllInstances.DataGet">
            <summary>设置 FluxInfo.get_Data() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimFluxInfo.AllInstances.DataSetDictionaryOfStringFluxInfoFluxData">
            <summary>设置 FluxInfo.set_Data(Dictionary`2&lt;String,FluxData&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimFluxInfo.AllInstances.ErrorGet">
            <summary>设置 FluxInfo.get_Error() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimFluxInfo.AllInstances.ErrorSetString">
            <summary>设置 FluxInfo.set_Error(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimFluxInfo.AllInstances.TimeGet">
            <summary>设置 FluxInfo.get_Time() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimFluxInfo.AllInstances.TimeSetListOfString">
            <summary>设置 FluxInfo.set_Time(List`1&lt;String&gt; value) 的 填充码</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimFluxInfo.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimFluxInfo.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimFluxInfo.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimFluxInfo.CodeGet">
            <summary>设置 FluxInfo.get_Code() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimFluxInfo.CodeSetInt32">
            <summary>设置 FluxInfo.set_Code(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimFluxInfo.Constructor">
            <summary>设置 FluxInfo.FluxInfo() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimFluxInfo.DataGet">
            <summary>设置 FluxInfo.get_Data() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimFluxInfo.DataSetDictionaryOfStringFluxInfoFluxData">
            <summary>设置 FluxInfo.set_Data(Dictionary`2&lt;String,FluxData&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimFluxInfo.ErrorGet">
            <summary>设置 FluxInfo.get_Error() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimFluxInfo.ErrorSetString">
            <summary>设置 FluxInfo.set_Error(String value) 的 填充码</summary>
        </member>
        <member name="T:Qiniu.CDN.Fakes.ShimFluxInfo.ShimFluxData">
            <summary>Qiniu.CDN.FluxInfo+FluxData 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimFluxInfo.ShimFluxData.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimFluxInfo.ShimFluxData.#ctor(Qiniu.CDN.FluxInfo.FluxData)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.CDN.Fakes.ShimFluxInfo.ShimFluxData.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimFluxInfo.ShimFluxData.AllInstances.ChinaGet">
            <summary>设置 FluxData.get_China() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimFluxInfo.ShimFluxData.AllInstances.ChinaSetListOfUInt64">
            <summary>设置 FluxData.set_China(List`1&lt;UInt64&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimFluxInfo.ShimFluxData.AllInstances.OverseaGet">
            <summary>设置 FluxData.get_Oversea() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimFluxInfo.ShimFluxData.AllInstances.OverseaSetListOfUInt64">
            <summary>设置 FluxData.set_Oversea(List`1&lt;UInt64&gt; value) 的 填充码</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimFluxInfo.ShimFluxData.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimFluxInfo.ShimFluxData.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimFluxInfo.ShimFluxData.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimFluxInfo.ShimFluxData.ChinaGet">
            <summary>设置 FluxData.get_China() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimFluxInfo.ShimFluxData.ChinaSetListOfUInt64">
            <summary>设置 FluxData.set_China(List`1&lt;UInt64&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimFluxInfo.ShimFluxData.Constructor">
            <summary>设置 FluxData.FluxData() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimFluxInfo.ShimFluxData.OverseaGet">
            <summary>设置 FluxData.get_Oversea() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimFluxInfo.ShimFluxData.OverseaSetListOfUInt64">
            <summary>设置 FluxData.set_Oversea(List`1&lt;UInt64&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimFluxInfo.TimeGet">
            <summary>设置 FluxInfo.get_Time() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimFluxInfo.TimeSetListOfString">
            <summary>设置 FluxInfo.set_Time(List`1&lt;String&gt; value) 的 填充码</summary>
        </member>
        <member name="T:Qiniu.CDN.Fakes.ShimFluxRequest">
            <summary>Qiniu.CDN.FluxRequest 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimFluxRequest.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimFluxRequest.#ctor(Qiniu.CDN.FluxRequest)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.CDN.Fakes.ShimFluxRequest.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimFluxRequest.AllInstances.DomainsGet">
            <summary>设置 FluxRequest.get_Domains() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimFluxRequest.AllInstances.DomainsSetString">
            <summary>设置 FluxRequest.set_Domains(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimFluxRequest.AllInstances.EndDateGet">
            <summary>设置 FluxRequest.get_EndDate() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimFluxRequest.AllInstances.EndDateSetString">
            <summary>设置 FluxRequest.set_EndDate(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimFluxRequest.AllInstances.GranularityGet">
            <summary>设置 FluxRequest.get_Granularity() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimFluxRequest.AllInstances.GranularitySetString">
            <summary>设置 FluxRequest.set_Granularity(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimFluxRequest.AllInstances.StartDateGet">
            <summary>设置 FluxRequest.get_StartDate() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimFluxRequest.AllInstances.StartDateSetString">
            <summary>设置 FluxRequest.set_StartDate(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimFluxRequest.AllInstances.ToJsonStr">
            <summary>设置 FluxRequest.ToJsonStr() 的 填充码</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimFluxRequest.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimFluxRequest.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimFluxRequest.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimFluxRequest.Constructor">
            <summary>设置 FluxRequest.FluxRequest() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimFluxRequest.ConstructorStringStringStringString">
            <summary>设置 FluxRequest.FluxRequest(String startDate, String endDate, String granularity, String domains) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimFluxRequest.DomainsGet">
            <summary>设置 FluxRequest.get_Domains() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimFluxRequest.DomainsSetString">
            <summary>设置 FluxRequest.set_Domains(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimFluxRequest.EndDateGet">
            <summary>设置 FluxRequest.get_EndDate() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimFluxRequest.EndDateSetString">
            <summary>设置 FluxRequest.set_EndDate(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimFluxRequest.GranularityGet">
            <summary>设置 FluxRequest.get_Granularity() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimFluxRequest.GranularitySetString">
            <summary>设置 FluxRequest.set_Granularity(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimFluxRequest.StartDateGet">
            <summary>设置 FluxRequest.get_StartDate() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimFluxRequest.StartDateSetString">
            <summary>设置 FluxRequest.set_StartDate(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimFluxRequest.ToJsonStr">
            <summary>设置 FluxRequest.ToJsonStr() 的 填充码</summary>
        </member>
        <member name="T:Qiniu.CDN.Fakes.ShimFluxResult">
            <summary>Qiniu.CDN.FluxResult 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimFluxResult.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimFluxResult.#ctor(Qiniu.CDN.FluxResult)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.CDN.Fakes.ShimFluxResult.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimFluxResult.AllInstances.ResultGet">
            <summary>设置 FluxResult.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimFluxResult.AllInstances.ToString01">
            <summary>设置 FluxResult.ToString() 的 填充码</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimFluxResult.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimFluxResult.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimFluxResult.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimFluxResult.Constructor">
            <summary>设置 FluxResult.FluxResult() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimFluxResult.ResultGet">
            <summary>设置 FluxResult.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimFluxResult.ToString">
            <summary>设置 FluxResult.ToString() 的 填充码</summary>
        </member>
        <member name="T:Qiniu.CDN.Fakes.ShimLogData">
            <summary>Qiniu.CDN.LogData 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimLogData.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimLogData.#ctor(Qiniu.CDN.LogData)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.CDN.Fakes.ShimLogData.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimLogData.AllInstances.MtimeGet">
            <summary>设置 LogData.get_Mtime() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimLogData.AllInstances.MtimeSetInt64">
            <summary>设置 LogData.set_Mtime(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimLogData.AllInstances.NameGet">
            <summary>设置 LogData.get_Name() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimLogData.AllInstances.NameSetString">
            <summary>设置 LogData.set_Name(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimLogData.AllInstances.SizeGet">
            <summary>设置 LogData.get_Size() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimLogData.AllInstances.SizeSetInt64">
            <summary>设置 LogData.set_Size(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimLogData.AllInstances.UrlGet">
            <summary>设置 LogData.get_Url() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimLogData.AllInstances.UrlSetString">
            <summary>设置 LogData.set_Url(String value) 的 填充码</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimLogData.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimLogData.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimLogData.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimLogData.Constructor">
            <summary>设置 LogData.LogData() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimLogData.MtimeGet">
            <summary>设置 LogData.get_Mtime() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimLogData.MtimeSetInt64">
            <summary>设置 LogData.set_Mtime(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimLogData.NameGet">
            <summary>设置 LogData.get_Name() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimLogData.NameSetString">
            <summary>设置 LogData.set_Name(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimLogData.SizeGet">
            <summary>设置 LogData.get_Size() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimLogData.SizeSetInt64">
            <summary>设置 LogData.set_Size(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimLogData.UrlGet">
            <summary>设置 LogData.get_Url() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimLogData.UrlSetString">
            <summary>设置 LogData.set_Url(String value) 的 填充码</summary>
        </member>
        <member name="T:Qiniu.CDN.Fakes.ShimLogListInfo">
            <summary>Qiniu.CDN.LogListInfo 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimLogListInfo.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimLogListInfo.#ctor(Qiniu.CDN.LogListInfo)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.CDN.Fakes.ShimLogListInfo.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimLogListInfo.AllInstances.CodeGet">
            <summary>设置 LogListInfo.get_Code() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimLogListInfo.AllInstances.CodeSetInt32">
            <summary>设置 LogListInfo.set_Code(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimLogListInfo.AllInstances.DataGet">
            <summary>设置 LogListInfo.get_Data() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimLogListInfo.AllInstances.DataSetDictionaryOfStringListOfLogData">
            <summary>设置 LogListInfo.set_Data(Dictionary`2&lt;String,List`1&lt;LogData&gt;&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimLogListInfo.AllInstances.ErrorGet">
            <summary>设置 LogListInfo.get_Error() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimLogListInfo.AllInstances.ErrorSetString">
            <summary>设置 LogListInfo.set_Error(String value) 的 填充码</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimLogListInfo.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimLogListInfo.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimLogListInfo.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimLogListInfo.CodeGet">
            <summary>设置 LogListInfo.get_Code() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimLogListInfo.CodeSetInt32">
            <summary>设置 LogListInfo.set_Code(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimLogListInfo.Constructor">
            <summary>设置 LogListInfo.LogListInfo() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimLogListInfo.DataGet">
            <summary>设置 LogListInfo.get_Data() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimLogListInfo.DataSetDictionaryOfStringListOfLogData">
            <summary>设置 LogListInfo.set_Data(Dictionary`2&lt;String,List`1&lt;LogData&gt;&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimLogListInfo.ErrorGet">
            <summary>设置 LogListInfo.get_Error() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimLogListInfo.ErrorSetString">
            <summary>设置 LogListInfo.set_Error(String value) 的 填充码</summary>
        </member>
        <member name="T:Qiniu.CDN.Fakes.ShimLogListRequest">
            <summary>Qiniu.CDN.LogListRequest 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimLogListRequest.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimLogListRequest.#ctor(Qiniu.CDN.LogListRequest)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.CDN.Fakes.ShimLogListRequest.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimLogListRequest.AllInstances.DayGet">
            <summary>设置 LogListRequest.get_Day() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimLogListRequest.AllInstances.DaySetString">
            <summary>设置 LogListRequest.set_Day(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimLogListRequest.AllInstances.DomainsGet">
            <summary>设置 LogListRequest.get_Domains() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimLogListRequest.AllInstances.DomainsSetString">
            <summary>设置 LogListRequest.set_Domains(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimLogListRequest.AllInstances.ToJsonStr">
            <summary>设置 LogListRequest.ToJsonStr() 的 填充码</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimLogListRequest.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimLogListRequest.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimLogListRequest.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimLogListRequest.Constructor">
            <summary>设置 LogListRequest.LogListRequest() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimLogListRequest.ConstructorStringIListOfString">
            <summary>设置 LogListRequest.LogListRequest(String day, IList`1&lt;String&gt; domains) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimLogListRequest.ConstructorStringString">
            <summary>设置 LogListRequest.LogListRequest(String day, String domains) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimLogListRequest.DayGet">
            <summary>设置 LogListRequest.get_Day() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimLogListRequest.DaySetString">
            <summary>设置 LogListRequest.set_Day(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimLogListRequest.DomainsGet">
            <summary>设置 LogListRequest.get_Domains() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimLogListRequest.DomainsSetString">
            <summary>设置 LogListRequest.set_Domains(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimLogListRequest.ToJsonStr">
            <summary>设置 LogListRequest.ToJsonStr() 的 填充码</summary>
        </member>
        <member name="T:Qiniu.CDN.Fakes.ShimLogListResult">
            <summary>Qiniu.CDN.LogListResult 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimLogListResult.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimLogListResult.#ctor(Qiniu.CDN.LogListResult)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.CDN.Fakes.ShimLogListResult.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimLogListResult.AllInstances.ResultGet">
            <summary>设置 LogListResult.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimLogListResult.AllInstances.ToString01">
            <summary>设置 LogListResult.ToString() 的 填充码</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimLogListResult.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimLogListResult.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimLogListResult.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimLogListResult.Constructor">
            <summary>设置 LogListResult.LogListResult() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimLogListResult.ResultGet">
            <summary>设置 LogListResult.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimLogListResult.ToString">
            <summary>设置 LogListResult.ToString() 的 填充码</summary>
        </member>
        <member name="T:Qiniu.CDN.Fakes.ShimPrefetchInfo">
            <summary>Qiniu.CDN.PrefetchInfo 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimPrefetchInfo.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimPrefetchInfo.#ctor(Qiniu.CDN.PrefetchInfo)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.CDN.Fakes.ShimPrefetchInfo.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimPrefetchInfo.AllInstances.CodeGet">
            <summary>设置 PrefetchInfo.get_Code() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimPrefetchInfo.AllInstances.CodeSetInt32">
            <summary>设置 PrefetchInfo.set_Code(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimPrefetchInfo.AllInstances.ErrorGet">
            <summary>设置 PrefetchInfo.get_Error() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimPrefetchInfo.AllInstances.ErrorSetString">
            <summary>设置 PrefetchInfo.set_Error(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimPrefetchInfo.AllInstances.InvalidUrlsGet">
            <summary>设置 PrefetchInfo.get_InvalidUrls() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimPrefetchInfo.AllInstances.InvalidUrlsSetListOfString">
            <summary>设置 PrefetchInfo.set_InvalidUrls(List`1&lt;String&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimPrefetchInfo.AllInstances.QuotaDayGet">
            <summary>设置 PrefetchInfo.get_QuotaDay() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimPrefetchInfo.AllInstances.QuotaDaySetInt32">
            <summary>设置 PrefetchInfo.set_QuotaDay(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimPrefetchInfo.AllInstances.RequestIdGet">
            <summary>设置 PrefetchInfo.get_RequestId() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimPrefetchInfo.AllInstances.RequestIdSetString">
            <summary>设置 PrefetchInfo.set_RequestId(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimPrefetchInfo.AllInstances.SurplusDayGet">
            <summary>设置 PrefetchInfo.get_SurplusDay() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimPrefetchInfo.AllInstances.SurplusDaySetInt32">
            <summary>设置 PrefetchInfo.set_SurplusDay(Int32 value) 的 填充码</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimPrefetchInfo.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimPrefetchInfo.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimPrefetchInfo.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimPrefetchInfo.CodeGet">
            <summary>设置 PrefetchInfo.get_Code() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimPrefetchInfo.CodeSetInt32">
            <summary>设置 PrefetchInfo.set_Code(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimPrefetchInfo.Constructor">
            <summary>设置 PrefetchInfo.PrefetchInfo() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimPrefetchInfo.ErrorGet">
            <summary>设置 PrefetchInfo.get_Error() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimPrefetchInfo.ErrorSetString">
            <summary>设置 PrefetchInfo.set_Error(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimPrefetchInfo.InvalidUrlsGet">
            <summary>设置 PrefetchInfo.get_InvalidUrls() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimPrefetchInfo.InvalidUrlsSetListOfString">
            <summary>设置 PrefetchInfo.set_InvalidUrls(List`1&lt;String&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimPrefetchInfo.QuotaDayGet">
            <summary>设置 PrefetchInfo.get_QuotaDay() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimPrefetchInfo.QuotaDaySetInt32">
            <summary>设置 PrefetchInfo.set_QuotaDay(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimPrefetchInfo.RequestIdGet">
            <summary>设置 PrefetchInfo.get_RequestId() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimPrefetchInfo.RequestIdSetString">
            <summary>设置 PrefetchInfo.set_RequestId(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimPrefetchInfo.SurplusDayGet">
            <summary>设置 PrefetchInfo.get_SurplusDay() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimPrefetchInfo.SurplusDaySetInt32">
            <summary>设置 PrefetchInfo.set_SurplusDay(Int32 value) 的 填充码</summary>
        </member>
        <member name="T:Qiniu.CDN.Fakes.ShimPrefetchRequest">
            <summary>Qiniu.CDN.PrefetchRequest 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimPrefetchRequest.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimPrefetchRequest.#ctor(Qiniu.CDN.PrefetchRequest)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimPrefetchRequest.AddUrlsIListOfString">
            <summary>设置 PrefetchRequest.AddUrls(IList`1&lt;String&gt; urls) 的 填充码</summary>
        </member>
        <member name="T:Qiniu.CDN.Fakes.ShimPrefetchRequest.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimPrefetchRequest.AllInstances.AddUrlsIListOfString">
            <summary>设置 PrefetchRequest.AddUrls(IList`1&lt;String&gt; urls) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimPrefetchRequest.AllInstances.ToJsonStr">
            <summary>设置 PrefetchRequest.ToJsonStr() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimPrefetchRequest.AllInstances.UrlsGet">
            <summary>设置 PrefetchRequest.get_Urls() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimPrefetchRequest.AllInstances.UrlsSetListOfString">
            <summary>设置 PrefetchRequest.set_Urls(List`1&lt;String&gt; value) 的 填充码</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimPrefetchRequest.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimPrefetchRequest.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimPrefetchRequest.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimPrefetchRequest.Constructor">
            <summary>设置 PrefetchRequest.PrefetchRequest() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimPrefetchRequest.ConstructorIListOfString">
            <summary>设置 PrefetchRequest.PrefetchRequest(IList`1&lt;String&gt; urls) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimPrefetchRequest.ToJsonStr">
            <summary>设置 PrefetchRequest.ToJsonStr() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimPrefetchRequest.UrlsGet">
            <summary>设置 PrefetchRequest.get_Urls() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimPrefetchRequest.UrlsSetListOfString">
            <summary>设置 PrefetchRequest.set_Urls(List`1&lt;String&gt; value) 的 填充码</summary>
        </member>
        <member name="T:Qiniu.CDN.Fakes.ShimPrefetchResult">
            <summary>Qiniu.CDN.PrefetchResult 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimPrefetchResult.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimPrefetchResult.#ctor(Qiniu.CDN.PrefetchResult)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.CDN.Fakes.ShimPrefetchResult.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimPrefetchResult.AllInstances.ResultGet">
            <summary>设置 PrefetchResult.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimPrefetchResult.AllInstances.ToString01">
            <summary>设置 PrefetchResult.ToString() 的 填充码</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimPrefetchResult.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimPrefetchResult.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimPrefetchResult.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimPrefetchResult.Constructor">
            <summary>设置 PrefetchResult.PrefetchResult() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimPrefetchResult.ResultGet">
            <summary>设置 PrefetchResult.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimPrefetchResult.ToString">
            <summary>设置 PrefetchResult.ToString() 的 填充码</summary>
        </member>
        <member name="T:Qiniu.CDN.Fakes.ShimRefreshInfo">
            <summary>Qiniu.CDN.RefreshInfo 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimRefreshInfo.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimRefreshInfo.#ctor(Qiniu.CDN.RefreshInfo)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.CDN.Fakes.ShimRefreshInfo.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimRefreshInfo.AllInstances.CodeGet">
            <summary>设置 RefreshInfo.get_Code() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimRefreshInfo.AllInstances.CodeSetInt32">
            <summary>设置 RefreshInfo.set_Code(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimRefreshInfo.AllInstances.DirQuotaDayGet">
            <summary>设置 RefreshInfo.get_DirQuotaDay() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimRefreshInfo.AllInstances.DirQuotaDaySetInt32">
            <summary>设置 RefreshInfo.set_DirQuotaDay(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimRefreshInfo.AllInstances.DirSurplusDayGet">
            <summary>设置 RefreshInfo.get_DirSurplusDay() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimRefreshInfo.AllInstances.DirSurplusDaySetInt32">
            <summary>设置 RefreshInfo.set_DirSurplusDay(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimRefreshInfo.AllInstances.ErrorGet">
            <summary>设置 RefreshInfo.get_Error() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimRefreshInfo.AllInstances.ErrorSetString">
            <summary>设置 RefreshInfo.set_Error(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimRefreshInfo.AllInstances.InvalidDirsGet">
            <summary>设置 RefreshInfo.get_InvalidDirs() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimRefreshInfo.AllInstances.InvalidDirsSetListOfString">
            <summary>设置 RefreshInfo.set_InvalidDirs(List`1&lt;String&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimRefreshInfo.AllInstances.InvalidUrlsGet">
            <summary>设置 RefreshInfo.get_InvalidUrls() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimRefreshInfo.AllInstances.InvalidUrlsSetListOfString">
            <summary>设置 RefreshInfo.set_InvalidUrls(List`1&lt;String&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimRefreshInfo.AllInstances.RequestIdGet">
            <summary>设置 RefreshInfo.get_RequestId() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimRefreshInfo.AllInstances.RequestIdSetString">
            <summary>设置 RefreshInfo.set_RequestId(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimRefreshInfo.AllInstances.UrlQuotaDayGet">
            <summary>设置 RefreshInfo.get_UrlQuotaDay() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimRefreshInfo.AllInstances.UrlQuotaDaySetInt32">
            <summary>设置 RefreshInfo.set_UrlQuotaDay(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimRefreshInfo.AllInstances.UrlSurplusDayGet">
            <summary>设置 RefreshInfo.get_UrlSurplusDay() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimRefreshInfo.AllInstances.UrlSurplusDaySetInt32">
            <summary>设置 RefreshInfo.set_UrlSurplusDay(Int32 value) 的 填充码</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimRefreshInfo.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimRefreshInfo.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimRefreshInfo.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimRefreshInfo.CodeGet">
            <summary>设置 RefreshInfo.get_Code() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimRefreshInfo.CodeSetInt32">
            <summary>设置 RefreshInfo.set_Code(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimRefreshInfo.Constructor">
            <summary>设置 RefreshInfo.RefreshInfo() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimRefreshInfo.DirQuotaDayGet">
            <summary>设置 RefreshInfo.get_DirQuotaDay() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimRefreshInfo.DirQuotaDaySetInt32">
            <summary>设置 RefreshInfo.set_DirQuotaDay(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimRefreshInfo.DirSurplusDayGet">
            <summary>设置 RefreshInfo.get_DirSurplusDay() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimRefreshInfo.DirSurplusDaySetInt32">
            <summary>设置 RefreshInfo.set_DirSurplusDay(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimRefreshInfo.ErrorGet">
            <summary>设置 RefreshInfo.get_Error() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimRefreshInfo.ErrorSetString">
            <summary>设置 RefreshInfo.set_Error(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimRefreshInfo.InvalidDirsGet">
            <summary>设置 RefreshInfo.get_InvalidDirs() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimRefreshInfo.InvalidDirsSetListOfString">
            <summary>设置 RefreshInfo.set_InvalidDirs(List`1&lt;String&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimRefreshInfo.InvalidUrlsGet">
            <summary>设置 RefreshInfo.get_InvalidUrls() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimRefreshInfo.InvalidUrlsSetListOfString">
            <summary>设置 RefreshInfo.set_InvalidUrls(List`1&lt;String&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimRefreshInfo.RequestIdGet">
            <summary>设置 RefreshInfo.get_RequestId() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimRefreshInfo.RequestIdSetString">
            <summary>设置 RefreshInfo.set_RequestId(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimRefreshInfo.UrlQuotaDayGet">
            <summary>设置 RefreshInfo.get_UrlQuotaDay() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimRefreshInfo.UrlQuotaDaySetInt32">
            <summary>设置 RefreshInfo.set_UrlQuotaDay(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimRefreshInfo.UrlSurplusDayGet">
            <summary>设置 RefreshInfo.get_UrlSurplusDay() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimRefreshInfo.UrlSurplusDaySetInt32">
            <summary>设置 RefreshInfo.set_UrlSurplusDay(Int32 value) 的 填充码</summary>
        </member>
        <member name="T:Qiniu.CDN.Fakes.ShimRefreshRequest">
            <summary>Qiniu.CDN.RefreshRequest 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimRefreshRequest.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimRefreshRequest.#ctor(Qiniu.CDN.RefreshRequest)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimRefreshRequest.AddDirsIListOfString">
            <summary>设置 RefreshRequest.AddDirs(IList`1&lt;String&gt; dirs) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimRefreshRequest.AddUrlsIListOfString">
            <summary>设置 RefreshRequest.AddUrls(IList`1&lt;String&gt; urls) 的 填充码</summary>
        </member>
        <member name="T:Qiniu.CDN.Fakes.ShimRefreshRequest.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimRefreshRequest.AllInstances.AddDirsIListOfString">
            <summary>设置 RefreshRequest.AddDirs(IList`1&lt;String&gt; dirs) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimRefreshRequest.AllInstances.AddUrlsIListOfString">
            <summary>设置 RefreshRequest.AddUrls(IList`1&lt;String&gt; urls) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimRefreshRequest.AllInstances.DirsGet">
            <summary>设置 RefreshRequest.get_Dirs() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimRefreshRequest.AllInstances.DirsSetListOfString">
            <summary>设置 RefreshRequest.set_Dirs(List`1&lt;String&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimRefreshRequest.AllInstances.ToJsonStr">
            <summary>设置 RefreshRequest.ToJsonStr() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimRefreshRequest.AllInstances.UrlsGet">
            <summary>设置 RefreshRequest.get_Urls() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimRefreshRequest.AllInstances.UrlsSetListOfString">
            <summary>设置 RefreshRequest.set_Urls(List`1&lt;String&gt; value) 的 填充码</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimRefreshRequest.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimRefreshRequest.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimRefreshRequest.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimRefreshRequest.Constructor">
            <summary>设置 RefreshRequest.RefreshRequest() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimRefreshRequest.ConstructorIListOfStringIListOfString">
            <summary>设置 RefreshRequest.RefreshRequest(IList`1&lt;String&gt; urls, IList`1&lt;String&gt; dirs) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimRefreshRequest.DirsGet">
            <summary>设置 RefreshRequest.get_Dirs() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimRefreshRequest.DirsSetListOfString">
            <summary>设置 RefreshRequest.set_Dirs(List`1&lt;String&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimRefreshRequest.ToJsonStr">
            <summary>设置 RefreshRequest.ToJsonStr() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimRefreshRequest.UrlsGet">
            <summary>设置 RefreshRequest.get_Urls() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimRefreshRequest.UrlsSetListOfString">
            <summary>设置 RefreshRequest.set_Urls(List`1&lt;String&gt; value) 的 填充码</summary>
        </member>
        <member name="T:Qiniu.CDN.Fakes.ShimRefreshResult">
            <summary>Qiniu.CDN.RefreshResult 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimRefreshResult.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimRefreshResult.#ctor(Qiniu.CDN.RefreshResult)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.CDN.Fakes.ShimRefreshResult.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimRefreshResult.AllInstances.ResultGet">
            <summary>设置 RefreshResult.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimRefreshResult.AllInstances.ToString01">
            <summary>设置 RefreshResult.ToString() 的 填充码</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimRefreshResult.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.ShimRefreshResult.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimRefreshResult.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimRefreshResult.Constructor">
            <summary>设置 RefreshResult.RefreshResult() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimRefreshResult.ResultGet">
            <summary>设置 RefreshResult.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.ShimRefreshResult.ToString">
            <summary>设置 RefreshResult.ToString() 的 填充码</summary>
        </member>
        <member name="T:Qiniu.CDN.Fakes.StubBandWidthData">
            <summary>Qiniu.CDN.BandWidthData 的存根类型</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.StubBandWidthData.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.StubBandWidthData.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.StubBandWidthData.InitializeStub">
            <summary>初始化 type StubBandWidthData 的新实例</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.StubBandWidthData.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.StubBandWidthData.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Qiniu.CDN.Fakes.StubBandwidthInfo">
            <summary>Qiniu.CDN.BandwidthInfo 的存根类型</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.StubBandwidthInfo.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.StubBandwidthInfo.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.StubBandwidthInfo.InitializeStub">
            <summary>初始化 type StubBandwidthInfo 的新实例</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.StubBandwidthInfo.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.StubBandwidthInfo.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Qiniu.CDN.Fakes.StubBandwidthRequest">
            <summary>Qiniu.CDN.BandwidthRequest 的存根类型</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.StubBandwidthRequest.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.StubBandwidthRequest.#ctor(System.String,System.String,System.String,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.StubBandwidthRequest.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.StubBandwidthRequest.InitializeStub">
            <summary>初始化 type StubBandwidthRequest 的新实例</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.StubBandwidthRequest.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.StubBandwidthRequest.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Qiniu.CDN.Fakes.StubBandwidthResult">
            <summary>Qiniu.CDN.BandwidthResult 的存根类型</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.StubBandwidthResult.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.StubBandwidthResult.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.StubBandwidthResult.InitializeStub">
            <summary>初始化 type StubBandwidthResult 的新实例</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.StubBandwidthResult.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.StubBandwidthResult.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.StubBandwidthResult.ToString">
            <summary>设置 BandwidthResult.ToString() 的 存根</summary>
        </member>
        <member name="F:Qiniu.CDN.Fakes.StubBandwidthResult.ToString01">
            <summary>设置 BandwidthResult.ToString() 的 stub</summary>
        </member>
        <member name="T:Qiniu.CDN.Fakes.StubCdnManager">
            <summary>Qiniu.CDN.CdnManager 的存根类型</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.StubCdnManager.#ctor(Qiniu.Util.Mac)">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.StubCdnManager.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.StubCdnManager.InitializeStub">
            <summary>初始化 type StubCdnManager 的新实例</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.StubCdnManager.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.StubCdnManager.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Qiniu.CDN.Fakes.StubFluxInfo">
            <summary>Qiniu.CDN.FluxInfo 的存根类型</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.StubFluxInfo.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.StubFluxInfo.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.StubFluxInfo.InitializeStub">
            <summary>初始化 type StubFluxInfo 的新实例</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.StubFluxInfo.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.StubFluxInfo.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Qiniu.CDN.Fakes.StubFluxRequest">
            <summary>Qiniu.CDN.FluxRequest 的存根类型</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.StubFluxRequest.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.StubFluxRequest.#ctor(System.String,System.String,System.String,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.StubFluxRequest.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.StubFluxRequest.InitializeStub">
            <summary>初始化 type StubFluxRequest 的新实例</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.StubFluxRequest.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.StubFluxRequest.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Qiniu.CDN.Fakes.StubFluxResult">
            <summary>Qiniu.CDN.FluxResult 的存根类型</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.StubFluxResult.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.StubFluxResult.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.StubFluxResult.InitializeStub">
            <summary>初始化 type StubFluxResult 的新实例</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.StubFluxResult.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.StubFluxResult.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.StubFluxResult.ToString">
            <summary>设置 FluxResult.ToString() 的 存根</summary>
        </member>
        <member name="F:Qiniu.CDN.Fakes.StubFluxResult.ToString01">
            <summary>设置 FluxResult.ToString() 的 stub</summary>
        </member>
        <member name="T:Qiniu.CDN.Fakes.StubLogData">
            <summary>Qiniu.CDN.LogData 的存根类型</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.StubLogData.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.StubLogData.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.StubLogData.InitializeStub">
            <summary>初始化 type StubLogData 的新实例</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.StubLogData.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.StubLogData.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Qiniu.CDN.Fakes.StubLogListInfo">
            <summary>Qiniu.CDN.LogListInfo 的存根类型</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.StubLogListInfo.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.StubLogListInfo.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.StubLogListInfo.InitializeStub">
            <summary>初始化 type StubLogListInfo 的新实例</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.StubLogListInfo.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.StubLogListInfo.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Qiniu.CDN.Fakes.StubLogListRequest">
            <summary>Qiniu.CDN.LogListRequest 的存根类型</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.StubLogListRequest.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.StubLogListRequest.#ctor(System.String,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.StubLogListRequest.#ctor(System.String,System.Collections.Generic.IList{System.String})">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.StubLogListRequest.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.StubLogListRequest.InitializeStub">
            <summary>初始化 type StubLogListRequest 的新实例</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.StubLogListRequest.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.StubLogListRequest.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Qiniu.CDN.Fakes.StubLogListResult">
            <summary>Qiniu.CDN.LogListResult 的存根类型</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.StubLogListResult.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.StubLogListResult.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.StubLogListResult.InitializeStub">
            <summary>初始化 type StubLogListResult 的新实例</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.StubLogListResult.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.StubLogListResult.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.StubLogListResult.ToString">
            <summary>设置 LogListResult.ToString() 的 存根</summary>
        </member>
        <member name="F:Qiniu.CDN.Fakes.StubLogListResult.ToString01">
            <summary>设置 LogListResult.ToString() 的 stub</summary>
        </member>
        <member name="T:Qiniu.CDN.Fakes.StubPrefetchInfo">
            <summary>Qiniu.CDN.PrefetchInfo 的存根类型</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.StubPrefetchInfo.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.StubPrefetchInfo.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.StubPrefetchInfo.InitializeStub">
            <summary>初始化 type StubPrefetchInfo 的新实例</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.StubPrefetchInfo.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.StubPrefetchInfo.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Qiniu.CDN.Fakes.StubPrefetchRequest">
            <summary>Qiniu.CDN.PrefetchRequest 的存根类型</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.StubPrefetchRequest.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.StubPrefetchRequest.#ctor(System.Collections.Generic.IList{System.String})">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.StubPrefetchRequest.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.StubPrefetchRequest.InitializeStub">
            <summary>初始化 type StubPrefetchRequest 的新实例</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.StubPrefetchRequest.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.StubPrefetchRequest.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Qiniu.CDN.Fakes.StubPrefetchResult">
            <summary>Qiniu.CDN.PrefetchResult 的存根类型</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.StubPrefetchResult.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.StubPrefetchResult.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.StubPrefetchResult.InitializeStub">
            <summary>初始化 type StubPrefetchResult 的新实例</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.StubPrefetchResult.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.StubPrefetchResult.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.StubPrefetchResult.ToString">
            <summary>设置 PrefetchResult.ToString() 的 存根</summary>
        </member>
        <member name="F:Qiniu.CDN.Fakes.StubPrefetchResult.ToString01">
            <summary>设置 PrefetchResult.ToString() 的 stub</summary>
        </member>
        <member name="T:Qiniu.CDN.Fakes.StubRefreshInfo">
            <summary>Qiniu.CDN.RefreshInfo 的存根类型</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.StubRefreshInfo.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.StubRefreshInfo.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.StubRefreshInfo.InitializeStub">
            <summary>初始化 type StubRefreshInfo 的新实例</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.StubRefreshInfo.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.StubRefreshInfo.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Qiniu.CDN.Fakes.StubRefreshRequest">
            <summary>Qiniu.CDN.RefreshRequest 的存根类型</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.StubRefreshRequest.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.StubRefreshRequest.#ctor(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.StubRefreshRequest.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.StubRefreshRequest.InitializeStub">
            <summary>初始化 type StubRefreshRequest 的新实例</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.StubRefreshRequest.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.StubRefreshRequest.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Qiniu.CDN.Fakes.StubRefreshResult">
            <summary>Qiniu.CDN.RefreshResult 的存根类型</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.StubRefreshResult.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.StubRefreshResult.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.StubRefreshResult.InitializeStub">
            <summary>初始化 type StubRefreshResult 的新实例</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.StubRefreshResult.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.CDN.Fakes.StubRefreshResult.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="M:Qiniu.CDN.Fakes.StubRefreshResult.ToString">
            <summary>设置 RefreshResult.ToString() 的 存根</summary>
        </member>
        <member name="F:Qiniu.CDN.Fakes.StubRefreshResult.ToString01">
            <summary>设置 RefreshResult.ToString() 的 stub</summary>
        </member>
        <member name="T:Qiniu.Http.Fakes.ShimContentType">
            <summary>Qiniu.Http.ContentType 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.Http.Fakes.ShimContentType.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.Http.Fakes.ShimContentType.#ctor(Qiniu.Http.ContentType)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.Http.Fakes.ShimContentType.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:Qiniu.Http.Fakes.ShimContentType.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.Http.Fakes.ShimContentType.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.ShimContentType.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.ShimContentType.Constructor">
            <summary>设置 ContentType.ContentType() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.ShimContentType.StaticConstructor">
            <summary>设置 ContentType.ContentType() 的 填充码</summary>
        </member>
        <member name="T:Qiniu.Http.Fakes.ShimHttpManager">
            <summary>Qiniu.Http.HttpManager 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.Http.Fakes.ShimHttpManager.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.Http.Fakes.ShimHttpManager.#ctor(Qiniu.Http.HttpManager)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.Http.Fakes.ShimHttpManager.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.ShimHttpManager.AllInstances.GetStringStringBoolean">
            <summary>设置 HttpManager.Get(String url, String token, Boolean binaryMode) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.ShimHttpManager.AllInstances.PostDataStringByteArrayStringBoolean">
            <summary>设置 HttpManager.PostData(String url, Byte[] data, String token, Boolean binaryMode) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.ShimHttpManager.AllInstances.PostDataStringByteArrayStringStringBoolean">
            <summary>设置 HttpManager.PostData(String url, Byte[] data, String mimeType, String token, Boolean binaryMode) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.ShimHttpManager.AllInstances.PostFormStringByteArrayStringBoolean">
            <summary>设置 HttpManager.PostForm(String url, Byte[] data, String token, Boolean binaryMode) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.ShimHttpManager.AllInstances.PostFormStringDictionaryOfStringStringStringBoolean">
            <summary>设置 HttpManager.PostForm(String url, Dictionary`2&lt;String,String&gt; kvData, String token, Boolean binaryMode) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.ShimHttpManager.AllInstances.PostFormStringStringStringBoolean">
            <summary>设置 HttpManager.PostForm(String url, String data, String token, Boolean binaryMode) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.ShimHttpManager.AllInstances.PostJsonStringStringStringBoolean">
            <summary>设置 HttpManager.PostJson(String url, String data, String token, Boolean binaryMode) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.ShimHttpManager.AllInstances.PostMultipartStringByteArrayStringStringBoolean">
            <summary>设置 HttpManager.PostMultipart(String url, Byte[] data, String boundary, String token, Boolean binaryMode) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.ShimHttpManager.AllInstances.PostStringStringBoolean">
            <summary>设置 HttpManager.Post(String url, String token, Boolean binaryMode) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.ShimHttpManager.AllInstances.PostTextStringStringStringBoolean">
            <summary>设置 HttpManager.PostText(String url, String data, String token, Boolean binaryMode) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.ShimHttpManager.AllInstances.SetUserAgentString">
            <summary>设置 HttpManager.SetUserAgent(String userAgent) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.ShimHttpManager.AllInstances.getHeadersHttpResultRefHttpWebResponse">
            <summary>设置 HttpManager.getHeaders(HttpResult&amp; hr, HttpWebResponse resp) 的 填充码</summary>
        </member>
        <member name="M:Qiniu.Http.Fakes.ShimHttpManager.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.Http.Fakes.ShimHttpManager.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.ShimHttpManager.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.ShimHttpManager.ConstructorBoolean">
            <summary>设置 HttpManager.HttpManager(Boolean allowAutoRedirect) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.ShimHttpManager.CreateFormDataBoundary">
            <summary>设置 HttpManager.CreateFormDataBoundary() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.ShimHttpManager.GetStringStringBoolean">
            <summary>设置 HttpManager.Get(String url, String token, Boolean binaryMode) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.ShimHttpManager.GetUserAgent">
            <summary>设置 HttpManager.GetUserAgent() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.ShimHttpManager.PostDataStringByteArrayStringBoolean">
            <summary>设置 HttpManager.PostData(String url, Byte[] data, String token, Boolean binaryMode) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.ShimHttpManager.PostDataStringByteArrayStringStringBoolean">
            <summary>设置 HttpManager.PostData(String url, Byte[] data, String mimeType, String token, Boolean binaryMode) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.ShimHttpManager.PostFormStringByteArrayStringBoolean">
            <summary>设置 HttpManager.PostForm(String url, Byte[] data, String token, Boolean binaryMode) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.ShimHttpManager.PostFormStringDictionaryOfStringStringStringBoolean">
            <summary>设置 HttpManager.PostForm(String url, Dictionary`2&lt;String,String&gt; kvData, String token, Boolean binaryMode) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.ShimHttpManager.PostFormStringStringStringBoolean">
            <summary>设置 HttpManager.PostForm(String url, String data, String token, Boolean binaryMode) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.ShimHttpManager.PostJsonStringStringStringBoolean">
            <summary>设置 HttpManager.PostJson(String url, String data, String token, Boolean binaryMode) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.ShimHttpManager.PostMultipartStringByteArrayStringStringBoolean">
            <summary>设置 HttpManager.PostMultipart(String url, Byte[] data, String boundary, String token, Boolean binaryMode) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.ShimHttpManager.PostStringStringBoolean">
            <summary>设置 HttpManager.Post(String url, String token, Boolean binaryMode) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.ShimHttpManager.PostTextStringStringStringBoolean">
            <summary>设置 HttpManager.PostText(String url, String data, String token, Boolean binaryMode) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.ShimHttpManager.SetUserAgentString">
            <summary>设置 HttpManager.SetUserAgent(String userAgent) 的 填充码</summary>
        </member>
        <member name="T:Qiniu.Http.Fakes.ShimHttpResult">
            <summary>Qiniu.Http.HttpResult 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.Http.Fakes.ShimHttpResult.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.Http.Fakes.ShimHttpResult.#ctor(Qiniu.Http.HttpResult)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.Http.Fakes.ShimHttpResult.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.ShimHttpResult.AllInstances.CodeGet">
            <summary>设置 HttpResult.get_Code() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.ShimHttpResult.AllInstances.CodeSetInt32">
            <summary>设置 HttpResult.set_Code(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.ShimHttpResult.AllInstances.DataGet">
            <summary>设置 HttpResult.get_Data() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.ShimHttpResult.AllInstances.DataSetByteArray">
            <summary>设置 HttpResult.set_Data(Byte[] value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.ShimHttpResult.AllInstances.RefCodeGet">
            <summary>设置 HttpResult.get_RefCode() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.ShimHttpResult.AllInstances.RefCodeSetInt32">
            <summary>设置 HttpResult.set_RefCode(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.ShimHttpResult.AllInstances.RefInfoGet">
            <summary>设置 HttpResult.get_RefInfo() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.ShimHttpResult.AllInstances.RefInfoSetDictionaryOfStringString">
            <summary>设置 HttpResult.set_RefInfo(Dictionary`2&lt;String,String&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.ShimHttpResult.AllInstances.RefTextGet">
            <summary>设置 HttpResult.get_RefText() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.ShimHttpResult.AllInstances.RefTextSetString">
            <summary>设置 HttpResult.set_RefText(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.ShimHttpResult.AllInstances.ShadowHttpResult">
            <summary>设置 HttpResult.Shadow(HttpResult hr) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.ShimHttpResult.AllInstances.TextGet">
            <summary>设置 HttpResult.get_Text() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.ShimHttpResult.AllInstances.TextSetString">
            <summary>设置 HttpResult.set_Text(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.ShimHttpResult.AllInstances.ToString01">
            <summary>设置 HttpResult.ToString() 的 填充码</summary>
        </member>
        <member name="M:Qiniu.Http.Fakes.ShimHttpResult.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.Http.Fakes.ShimHttpResult.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.ShimHttpResult.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.ShimHttpResult.CodeGet">
            <summary>设置 HttpResult.get_Code() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.ShimHttpResult.CodeSetInt32">
            <summary>设置 HttpResult.set_Code(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.ShimHttpResult.Constructor">
            <summary>设置 HttpResult.HttpResult() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.ShimHttpResult.DataGet">
            <summary>设置 HttpResult.get_Data() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.ShimHttpResult.DataSetByteArray">
            <summary>设置 HttpResult.set_Data(Byte[] value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.ShimHttpResult.RefCodeGet">
            <summary>设置 HttpResult.get_RefCode() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.ShimHttpResult.RefCodeSetInt32">
            <summary>设置 HttpResult.set_RefCode(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.ShimHttpResult.RefInfoGet">
            <summary>设置 HttpResult.get_RefInfo() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.ShimHttpResult.RefInfoSetDictionaryOfStringString">
            <summary>设置 HttpResult.set_RefInfo(Dictionary`2&lt;String,String&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.ShimHttpResult.RefTextGet">
            <summary>设置 HttpResult.get_RefText() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.ShimHttpResult.RefTextSetString">
            <summary>设置 HttpResult.set_RefText(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.ShimHttpResult.ShadowHttpResult">
            <summary>设置 HttpResult.Shadow(HttpResult hr) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.ShimHttpResult.StaticConstructor">
            <summary>设置 HttpResult.HttpResult() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.ShimHttpResult.TextGet">
            <summary>设置 HttpResult.get_Text() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.ShimHttpResult.TextSetString">
            <summary>设置 HttpResult.set_Text(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.ShimHttpResult.ToString">
            <summary>设置 HttpResult.ToString() 的 填充码</summary>
        </member>
        <member name="T:Qiniu.Http.Fakes.StubContentType">
            <summary>Qiniu.Http.ContentType 的存根类型</summary>
        </member>
        <member name="M:Qiniu.Http.Fakes.StubContentType.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.StubContentType.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.Http.Fakes.StubContentType.InitializeStub">
            <summary>初始化 type StubContentType 的新实例</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.StubContentType.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.StubContentType.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Qiniu.Http.Fakes.StubHttpManager">
            <summary>Qiniu.Http.HttpManager 的存根类型</summary>
        </member>
        <member name="M:Qiniu.Http.Fakes.StubHttpManager.#ctor(System.Boolean)">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.StubHttpManager.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.Http.Fakes.StubHttpManager.InitializeStub">
            <summary>初始化 type StubHttpManager 的新实例</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.StubHttpManager.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.StubHttpManager.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Qiniu.Http.Fakes.StubHttpResult">
            <summary>Qiniu.Http.HttpResult 的存根类型</summary>
        </member>
        <member name="M:Qiniu.Http.Fakes.StubHttpResult.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.StubHttpResult.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.Http.Fakes.StubHttpResult.InitializeStub">
            <summary>初始化 type StubHttpResult 的新实例</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.StubHttpResult.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.Http.Fakes.StubHttpResult.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="M:Qiniu.Http.Fakes.StubHttpResult.ToString">
            <summary>设置 HttpResult.ToString() 的 存根</summary>
        </member>
        <member name="F:Qiniu.Http.Fakes.StubHttpResult.ToString01">
            <summary>设置 HttpResult.ToString() 的 stub</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimBatchData">
            <summary>Qiniu.Storage.BatchData 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimBatchData.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimBatchData.#ctor(Qiniu.Storage.BatchData)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimBatchData.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBatchData.AllInstances.ErrorGet">
            <summary>设置 BatchData.get_Error() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBatchData.AllInstances.ErrorSetString">
            <summary>设置 BatchData.set_Error(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBatchData.AllInstances.FileTypeGet">
            <summary>设置 BatchData.get_FileType() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBatchData.AllInstances.FileTypeSetInt32">
            <summary>设置 BatchData.set_FileType(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBatchData.AllInstances.FsizeGet">
            <summary>设置 BatchData.get_Fsize() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBatchData.AllInstances.FsizeSetInt64">
            <summary>设置 BatchData.set_Fsize(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBatchData.AllInstances.HashGet">
            <summary>设置 BatchData.get_Hash() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBatchData.AllInstances.HashSetString">
            <summary>设置 BatchData.set_Hash(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBatchData.AllInstances.MimeTypeGet">
            <summary>设置 BatchData.get_MimeType() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBatchData.AllInstances.MimeTypeSetString">
            <summary>设置 BatchData.set_MimeType(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBatchData.AllInstances.PutTimeGet">
            <summary>设置 BatchData.get_PutTime() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBatchData.AllInstances.PutTimeSetInt64">
            <summary>设置 BatchData.set_PutTime(Int64 value) 的 填充码</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimBatchData.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimBatchData.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBatchData.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBatchData.Constructor">
            <summary>设置 BatchData.BatchData() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBatchData.ErrorGet">
            <summary>设置 BatchData.get_Error() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBatchData.ErrorSetString">
            <summary>设置 BatchData.set_Error(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBatchData.FileTypeGet">
            <summary>设置 BatchData.get_FileType() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBatchData.FileTypeSetInt32">
            <summary>设置 BatchData.set_FileType(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBatchData.FsizeGet">
            <summary>设置 BatchData.get_Fsize() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBatchData.FsizeSetInt64">
            <summary>设置 BatchData.set_Fsize(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBatchData.HashGet">
            <summary>设置 BatchData.get_Hash() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBatchData.HashSetString">
            <summary>设置 BatchData.set_Hash(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBatchData.MimeTypeGet">
            <summary>设置 BatchData.get_MimeType() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBatchData.MimeTypeSetString">
            <summary>设置 BatchData.set_MimeType(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBatchData.PutTimeGet">
            <summary>设置 BatchData.get_PutTime() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBatchData.PutTimeSetInt64">
            <summary>设置 BatchData.set_PutTime(Int64 value) 的 填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimBatchInfo">
            <summary>Qiniu.Storage.BatchInfo 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimBatchInfo.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimBatchInfo.#ctor(Qiniu.Storage.BatchInfo)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimBatchInfo.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBatchInfo.AllInstances.CodeGet">
            <summary>设置 BatchInfo.get_Code() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBatchInfo.AllInstances.CodeSetInt32">
            <summary>设置 BatchInfo.set_Code(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBatchInfo.AllInstances.DataGet">
            <summary>设置 BatchInfo.get_Data() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBatchInfo.AllInstances.DataSetBatchData">
            <summary>设置 BatchInfo.set_Data(BatchData value) 的 填充码</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimBatchInfo.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimBatchInfo.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBatchInfo.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBatchInfo.CodeGet">
            <summary>设置 BatchInfo.get_Code() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBatchInfo.CodeSetInt32">
            <summary>设置 BatchInfo.set_Code(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBatchInfo.Constructor">
            <summary>设置 BatchInfo.BatchInfo() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBatchInfo.DataGet">
            <summary>设置 BatchInfo.get_Data() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBatchInfo.DataSetBatchData">
            <summary>设置 BatchInfo.set_Data(BatchData value) 的 填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimBatchResult">
            <summary>Qiniu.Storage.BatchResult 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimBatchResult.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimBatchResult.#ctor(Qiniu.Storage.BatchResult)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimBatchResult.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBatchResult.AllInstances.ErrorGet">
            <summary>设置 BatchResult.get_Error() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBatchResult.AllInstances.ResultGet">
            <summary>设置 BatchResult.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBatchResult.AllInstances.ToString01">
            <summary>设置 BatchResult.ToString() 的 填充码</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimBatchResult.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimBatchResult.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBatchResult.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBatchResult.Constructor">
            <summary>设置 BatchResult.BatchResult() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBatchResult.ErrorGet">
            <summary>设置 BatchResult.get_Error() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBatchResult.ResultGet">
            <summary>设置 BatchResult.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBatchResult.ToString">
            <summary>设置 BatchResult.ToString() 的 填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimBucketInfo">
            <summary>Qiniu.Storage.BucketInfo 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimBucketInfo.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimBucketInfo.#ctor(Qiniu.Storage.BucketInfo)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimBucketInfo.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketInfo.AllInstances.ctimeGet">
            <summary>设置 BucketInfo.get_ctime() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketInfo.AllInstances.ctimeSetInt64">
            <summary>设置 BucketInfo.set_ctime(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketInfo.AllInstances.globalGet">
            <summary>设置 BucketInfo.get_global() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketInfo.AllInstances.globalSetBoolean">
            <summary>设置 BucketInfo.set_global(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketInfo.AllInstances.itblGet">
            <summary>设置 BucketInfo.get_itbl() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketInfo.AllInstances.itblSetInt64">
            <summary>设置 BucketInfo.set_itbl(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketInfo.AllInstances.lineGet">
            <summary>设置 BucketInfo.get_line() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketInfo.AllInstances.lineSetBoolean">
            <summary>设置 BucketInfo.set_line(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketInfo.AllInstances.phyGet">
            <summary>设置 BucketInfo.get_phy() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketInfo.AllInstances.phySetString">
            <summary>设置 BucketInfo.set_phy(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketInfo.AllInstances.regionGet">
            <summary>设置 BucketInfo.get_region() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketInfo.AllInstances.regionSetString">
            <summary>设置 BucketInfo.set_region(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketInfo.AllInstances.tblGet">
            <summary>设置 BucketInfo.get_tbl() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketInfo.AllInstances.tblSetString">
            <summary>设置 BucketInfo.set_tbl(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketInfo.AllInstances.uidGet">
            <summary>设置 BucketInfo.get_uid() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketInfo.AllInstances.uidSetInt64">
            <summary>设置 BucketInfo.set_uid(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketInfo.AllInstances.zoneGet">
            <summary>设置 BucketInfo.get_zone() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketInfo.AllInstances.zoneSetString">
            <summary>设置 BucketInfo.set_zone(String value) 的 填充码</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimBucketInfo.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimBucketInfo.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketInfo.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketInfo.Constructor">
            <summary>设置 BucketInfo.BucketInfo() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketInfo.ctimeGet">
            <summary>设置 BucketInfo.get_ctime() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketInfo.ctimeSetInt64">
            <summary>设置 BucketInfo.set_ctime(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketInfo.globalGet">
            <summary>设置 BucketInfo.get_global() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketInfo.globalSetBoolean">
            <summary>设置 BucketInfo.set_global(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketInfo.itblGet">
            <summary>设置 BucketInfo.get_itbl() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketInfo.itblSetInt64">
            <summary>设置 BucketInfo.set_itbl(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketInfo.lineGet">
            <summary>设置 BucketInfo.get_line() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketInfo.lineSetBoolean">
            <summary>设置 BucketInfo.set_line(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketInfo.phyGet">
            <summary>设置 BucketInfo.get_phy() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketInfo.phySetString">
            <summary>设置 BucketInfo.set_phy(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketInfo.regionGet">
            <summary>设置 BucketInfo.get_region() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketInfo.regionSetString">
            <summary>设置 BucketInfo.set_region(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketInfo.tblGet">
            <summary>设置 BucketInfo.get_tbl() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketInfo.tblSetString">
            <summary>设置 BucketInfo.set_tbl(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketInfo.uidGet">
            <summary>设置 BucketInfo.get_uid() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketInfo.uidSetInt64">
            <summary>设置 BucketInfo.set_uid(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketInfo.zoneGet">
            <summary>设置 BucketInfo.get_zone() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketInfo.zoneSetString">
            <summary>设置 BucketInfo.set_zone(String value) 的 填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimBucketManager">
            <summary>Qiniu.Storage.BucketManager 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimBucketManager.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimBucketManager.#ctor(Qiniu.Storage.BucketManager)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimBucketManager.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketManager.AllInstances.BatchIListOfString">
            <summary>设置 BucketManager.Batch(IList`1&lt;String&gt; ops) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketManager.AllInstances.BatchString">
            <summary>设置 BucketManager.Batch(String batchOps) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketManager.AllInstances.BucketsBoolean">
            <summary>设置 BucketManager.Buckets(Boolean shared) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketManager.AllInstances.ChangeMimeOpStringStringString">
            <summary>设置 BucketManager.ChangeMimeOp(String bucket, String key, String mimeType) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketManager.AllInstances.ChangeMimeStringStringString">
            <summary>设置 BucketManager.ChangeMime(String bucket, String key, String mimeType) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketManager.AllInstances.ChangeTypeOpStringStringInt32">
            <summary>设置 BucketManager.ChangeTypeOp(String bucket, String key, Int32 fileType) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketManager.AllInstances.ChangeTypeStringStringInt32">
            <summary>设置 BucketManager.ChangeType(String bucket, String key, Int32 fileType) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketManager.AllInstances.CopyOpStringStringStringString">
            <summary>设置 BucketManager.CopyOp(String srcBucket, String srcKey, String dstBucket, String dstKey) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketManager.AllInstances.CopyOpStringStringStringStringBoolean">
            <summary>设置 BucketManager.CopyOp(String srcBucket, String srcKey, String dstBucket, String dstKey, Boolean force) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketManager.AllInstances.CopyStringStringStringString">
            <summary>设置 BucketManager.Copy(String srcBucket, String srcKey, String dstBucket, String dstKey) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketManager.AllInstances.CopyStringStringStringStringBoolean">
            <summary>设置 BucketManager.Copy(String srcBucket, String srcKey, String dstBucket, String dstKey, Boolean force) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketManager.AllInstances.DeleteAfterDaysOpStringStringInt32">
            <summary>设置 BucketManager.DeleteAfterDaysOp(String bucket, String key, Int32 deleteAfterDays) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketManager.AllInstances.DeleteAfterDaysStringStringInt32">
            <summary>设置 BucketManager.DeleteAfterDays(String bucket, String key, Int32 deleteAfterDays) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketManager.AllInstances.DeleteOpStringString">
            <summary>设置 BucketManager.DeleteOp(String bucket, String key) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketManager.AllInstances.DeleteStringString">
            <summary>设置 BucketManager.Delete(String bucket, String key) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketManager.AllInstances.DomainsString">
            <summary>设置 BucketManager.Domains(String bucket) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketManager.AllInstances.FetchOpStringStringString">
            <summary>设置 BucketManager.FetchOp(String url, String bucket, String key) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketManager.AllInstances.FetchStringStringString">
            <summary>设置 BucketManager.Fetch(String resUrl, String bucket, String key) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketManager.AllInstances.ListFilesStringStringStringInt32String">
            <summary>设置 BucketManager.ListFiles(String bucket, String prefix, String marker, Int32 limit, String delimiter) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketManager.AllInstances.MoveOpStringStringStringString">
            <summary>设置 BucketManager.MoveOp(String srcBucket, String srcKey, String dstBucket, String dstKey) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketManager.AllInstances.MoveOpStringStringStringStringBoolean">
            <summary>设置 BucketManager.MoveOp(String srcBucket, String srcKey, String dstBucket, String dstKey, Boolean force) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketManager.AllInstances.MoveStringStringStringString">
            <summary>设置 BucketManager.Move(String srcBucket, String srcKey, String dstBucket, String dstKey) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketManager.AllInstances.MoveStringStringStringStringBoolean">
            <summary>设置 BucketManager.Move(String srcBucket, String srcKey, String dstBucket, String dstKey, Boolean force) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketManager.AllInstances.PrefetchOpStringString">
            <summary>设置 BucketManager.PrefetchOp(String bucket, String key) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketManager.AllInstances.PrefetchStringString">
            <summary>设置 BucketManager.Prefetch(String bucket, String key) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketManager.AllInstances.StatOpStringString">
            <summary>设置 BucketManager.StatOp(String bucket, String key) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketManager.AllInstances.StatStringString">
            <summary>设置 BucketManager.Stat(String bucket, String key) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketManager.BatchIListOfString">
            <summary>设置 BucketManager.Batch(IList`1&lt;String&gt; ops) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketManager.BatchString">
            <summary>设置 BucketManager.Batch(String batchOps) 的 填充码</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimBucketManager.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimBucketManager.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketManager.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketManager.BucketsBoolean">
            <summary>设置 BucketManager.Buckets(Boolean shared) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketManager.ChangeMimeOpStringStringString">
            <summary>设置 BucketManager.ChangeMimeOp(String bucket, String key, String mimeType) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketManager.ChangeMimeStringStringString">
            <summary>设置 BucketManager.ChangeMime(String bucket, String key, String mimeType) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketManager.ChangeTypeOpStringStringInt32">
            <summary>设置 BucketManager.ChangeTypeOp(String bucket, String key, Int32 fileType) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketManager.ChangeTypeStringStringInt32">
            <summary>设置 BucketManager.ChangeType(String bucket, String key, Int32 fileType) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketManager.ConstructorMacConfig">
            <summary>设置 BucketManager.BucketManager(Mac mac, Config config) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketManager.CopyOpStringStringStringString">
            <summary>设置 BucketManager.CopyOp(String srcBucket, String srcKey, String dstBucket, String dstKey) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketManager.CopyOpStringStringStringStringBoolean">
            <summary>设置 BucketManager.CopyOp(String srcBucket, String srcKey, String dstBucket, String dstKey, Boolean force) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketManager.CopyStringStringStringString">
            <summary>设置 BucketManager.Copy(String srcBucket, String srcKey, String dstBucket, String dstKey) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketManager.CopyStringStringStringStringBoolean">
            <summary>设置 BucketManager.Copy(String srcBucket, String srcKey, String dstBucket, String dstKey, Boolean force) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketManager.DeleteAfterDaysOpStringStringInt32">
            <summary>设置 BucketManager.DeleteAfterDaysOp(String bucket, String key, Int32 deleteAfterDays) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketManager.DeleteAfterDaysStringStringInt32">
            <summary>设置 BucketManager.DeleteAfterDays(String bucket, String key, Int32 deleteAfterDays) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketManager.DeleteOpStringString">
            <summary>设置 BucketManager.DeleteOp(String bucket, String key) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketManager.DeleteStringString">
            <summary>设置 BucketManager.Delete(String bucket, String key) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketManager.DomainsString">
            <summary>设置 BucketManager.Domains(String bucket) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketManager.FetchOpStringStringString">
            <summary>设置 BucketManager.FetchOp(String url, String bucket, String key) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketManager.FetchStringStringString">
            <summary>设置 BucketManager.Fetch(String resUrl, String bucket, String key) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketManager.ListFilesStringStringStringInt32String">
            <summary>设置 BucketManager.ListFiles(String bucket, String prefix, String marker, Int32 limit, String delimiter) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketManager.MoveOpStringStringStringString">
            <summary>设置 BucketManager.MoveOp(String srcBucket, String srcKey, String dstBucket, String dstKey) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketManager.MoveOpStringStringStringStringBoolean">
            <summary>设置 BucketManager.MoveOp(String srcBucket, String srcKey, String dstBucket, String dstKey, Boolean force) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketManager.MoveStringStringStringString">
            <summary>设置 BucketManager.Move(String srcBucket, String srcKey, String dstBucket, String dstKey) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketManager.MoveStringStringStringStringBoolean">
            <summary>设置 BucketManager.Move(String srcBucket, String srcKey, String dstBucket, String dstKey, Boolean force) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketManager.PrefetchOpStringString">
            <summary>设置 BucketManager.PrefetchOp(String bucket, String key) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketManager.PrefetchStringString">
            <summary>设置 BucketManager.Prefetch(String bucket, String key) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketManager.StatOpStringString">
            <summary>设置 BucketManager.StatOp(String bucket, String key) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketManager.StatStringString">
            <summary>设置 BucketManager.Stat(String bucket, String key) 的 填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimBucketResult">
            <summary>Qiniu.Storage.BucketResult 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimBucketResult.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimBucketResult.#ctor(Qiniu.Storage.BucketResult)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimBucketResult.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketResult.AllInstances.ResultGet">
            <summary>设置 BucketResult.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketResult.AllInstances.ToString01">
            <summary>设置 BucketResult.ToString() 的 填充码</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimBucketResult.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimBucketResult.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketResult.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketResult.Constructor">
            <summary>设置 BucketResult.BucketResult() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketResult.ResultGet">
            <summary>设置 BucketResult.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketResult.ToString">
            <summary>设置 BucketResult.ToString() 的 填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimBucketsResult">
            <summary>Qiniu.Storage.BucketsResult 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimBucketsResult.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimBucketsResult.#ctor(Qiniu.Storage.BucketsResult)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimBucketsResult.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketsResult.AllInstances.ResultGet">
            <summary>设置 BucketsResult.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketsResult.AllInstances.ToString01">
            <summary>设置 BucketsResult.ToString() 的 填充码</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimBucketsResult.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimBucketsResult.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketsResult.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketsResult.Constructor">
            <summary>设置 BucketsResult.BucketsResult() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketsResult.ResultGet">
            <summary>设置 BucketsResult.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimBucketsResult.ToString">
            <summary>设置 BucketsResult.ToString() 的 填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimConfig">
            <summary>Qiniu.Storage.Config 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimConfig.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimConfig.#ctor(Qiniu.Storage.Config)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimConfig.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimConfig.AllInstances.ApiHostStringString">
            <summary>设置 Config.ApiHost(String ak, String bucket) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimConfig.AllInstances.IovipHostStringString">
            <summary>设置 Config.IovipHost(String ak, String bucket) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimConfig.AllInstances.RsHostStringString">
            <summary>设置 Config.RsHost(String ak, String bucket) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimConfig.AllInstances.RsfHostStringString">
            <summary>设置 Config.RsfHost(String ak, String bucket) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimConfig.AllInstances.UpHostStringString">
            <summary>设置 Config.UpHost(String ak, String bucket) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimConfig.ApiHostStringString">
            <summary>设置 Config.ApiHost(String ak, String bucket) 的 填充码</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimConfig.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimConfig.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimConfig.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimConfig.Constructor">
            <summary>设置 Config.Config() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimConfig.IovipHostStringString">
            <summary>设置 Config.IovipHost(String ak, String bucket) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimConfig.RsHostStringString">
            <summary>设置 Config.RsHost(String ak, String bucket) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimConfig.RsfHostStringString">
            <summary>设置 Config.RsfHost(String ak, String bucket) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimConfig.StaticConstructor">
            <summary>设置 Config.Config() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimConfig.UpHostStringString">
            <summary>设置 Config.UpHost(String ak, String bucket) 的 填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimDomainsResult">
            <summary>Qiniu.Storage.DomainsResult 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimDomainsResult.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimDomainsResult.#ctor(Qiniu.Storage.DomainsResult)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimDomainsResult.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimDomainsResult.AllInstances.ResultGet">
            <summary>设置 DomainsResult.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimDomainsResult.AllInstances.ToString01">
            <summary>设置 DomainsResult.ToString() 的 填充码</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimDomainsResult.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimDomainsResult.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimDomainsResult.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimDomainsResult.Constructor">
            <summary>设置 DomainsResult.DomainsResult() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimDomainsResult.ResultGet">
            <summary>设置 DomainsResult.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimDomainsResult.ToString">
            <summary>设置 DomainsResult.ToString() 的 填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimDownloadManager">
            <summary>Qiniu.Storage.DownloadManager 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimDownloadManager.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimDownloadManager.#ctor(Qiniu.Storage.DownloadManager)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimDownloadManager.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimDownloadManager.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimDownloadManager.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimDownloadManager.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimDownloadManager.Constructor">
            <summary>设置 DownloadManager.DownloadManager() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimDownloadManager.CreatePrivateUrlMacStringStringInt32">
            <summary>设置 DownloadManager.CreatePrivateUrl(Mac mac, String domain, String fileName, Int32 expireInSeconds) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimDownloadManager.CreatePublishUrlStringString">
            <summary>设置 DownloadManager.CreatePublishUrl(String domain, String fileName) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimDownloadManager.DownloadStringString">
            <summary>设置 DownloadManager.Download(String url, String saveasFile) 的 填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimFetchInfo">
            <summary>Qiniu.Storage.FetchInfo 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimFetchInfo.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimFetchInfo.#ctor(Qiniu.Storage.FetchInfo)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimFetchInfo.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimFetchInfo.AllInstances.FsizeGet">
            <summary>设置 FetchInfo.get_Fsize() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimFetchInfo.AllInstances.FsizeSetInt64">
            <summary>设置 FetchInfo.set_Fsize(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimFetchInfo.AllInstances.HashGet">
            <summary>设置 FetchInfo.get_Hash() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimFetchInfo.AllInstances.HashSetString">
            <summary>设置 FetchInfo.set_Hash(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimFetchInfo.AllInstances.KeyGet">
            <summary>设置 FetchInfo.get_Key() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimFetchInfo.AllInstances.KeySetString">
            <summary>设置 FetchInfo.set_Key(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimFetchInfo.AllInstances.MimeTypeGet">
            <summary>设置 FetchInfo.get_MimeType() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimFetchInfo.AllInstances.MimeTypeSetString">
            <summary>设置 FetchInfo.set_MimeType(String value) 的 填充码</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimFetchInfo.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimFetchInfo.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimFetchInfo.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimFetchInfo.Constructor">
            <summary>设置 FetchInfo.FetchInfo() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimFetchInfo.FsizeGet">
            <summary>设置 FetchInfo.get_Fsize() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimFetchInfo.FsizeSetInt64">
            <summary>设置 FetchInfo.set_Fsize(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimFetchInfo.HashGet">
            <summary>设置 FetchInfo.get_Hash() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimFetchInfo.HashSetString">
            <summary>设置 FetchInfo.set_Hash(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimFetchInfo.KeyGet">
            <summary>设置 FetchInfo.get_Key() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimFetchInfo.KeySetString">
            <summary>设置 FetchInfo.set_Key(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimFetchInfo.MimeTypeGet">
            <summary>设置 FetchInfo.get_MimeType() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimFetchInfo.MimeTypeSetString">
            <summary>设置 FetchInfo.set_MimeType(String value) 的 填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimFetchResult">
            <summary>Qiniu.Storage.FetchResult 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimFetchResult.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimFetchResult.#ctor(Qiniu.Storage.FetchResult)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimFetchResult.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimFetchResult.AllInstances.ResultGet">
            <summary>设置 FetchResult.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimFetchResult.AllInstances.ToString01">
            <summary>设置 FetchResult.ToString() 的 填充码</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimFetchResult.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimFetchResult.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimFetchResult.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimFetchResult.Constructor">
            <summary>设置 FetchResult.FetchResult() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimFetchResult.ResultGet">
            <summary>设置 FetchResult.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimFetchResult.ToString">
            <summary>设置 FetchResult.ToString() 的 填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimFileInfo">
            <summary>Qiniu.Storage.FileInfo 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimFileInfo.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimFileInfo.#ctor(Qiniu.Storage.FileInfo)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimFileInfo.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimFileInfo.AllInstances.FileTypeGet">
            <summary>设置 FileInfo.get_FileType() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimFileInfo.AllInstances.FileTypeSetInt32">
            <summary>设置 FileInfo.set_FileType(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimFileInfo.AllInstances.FsizeGet">
            <summary>设置 FileInfo.get_Fsize() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimFileInfo.AllInstances.FsizeSetInt64">
            <summary>设置 FileInfo.set_Fsize(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimFileInfo.AllInstances.HashGet">
            <summary>设置 FileInfo.get_Hash() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimFileInfo.AllInstances.HashSetString">
            <summary>设置 FileInfo.set_Hash(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimFileInfo.AllInstances.MimeTypeGet">
            <summary>设置 FileInfo.get_MimeType() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimFileInfo.AllInstances.MimeTypeSetString">
            <summary>设置 FileInfo.set_MimeType(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimFileInfo.AllInstances.PutTimeGet">
            <summary>设置 FileInfo.get_PutTime() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimFileInfo.AllInstances.PutTimeSetInt64">
            <summary>设置 FileInfo.set_PutTime(Int64 value) 的 填充码</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimFileInfo.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimFileInfo.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimFileInfo.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimFileInfo.Constructor">
            <summary>设置 FileInfo.FileInfo() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimFileInfo.FileTypeGet">
            <summary>设置 FileInfo.get_FileType() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimFileInfo.FileTypeSetInt32">
            <summary>设置 FileInfo.set_FileType(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimFileInfo.FsizeGet">
            <summary>设置 FileInfo.get_Fsize() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimFileInfo.FsizeSetInt64">
            <summary>设置 FileInfo.set_Fsize(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimFileInfo.HashGet">
            <summary>设置 FileInfo.get_Hash() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimFileInfo.HashSetString">
            <summary>设置 FileInfo.set_Hash(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimFileInfo.MimeTypeGet">
            <summary>设置 FileInfo.get_MimeType() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimFileInfo.MimeTypeSetString">
            <summary>设置 FileInfo.set_MimeType(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimFileInfo.PutTimeGet">
            <summary>设置 FileInfo.get_PutTime() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimFileInfo.PutTimeSetInt64">
            <summary>设置 FileInfo.set_PutTime(Int64 value) 的 填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimFormUploader">
            <summary>Qiniu.Storage.FormUploader 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimFormUploader.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimFormUploader.#ctor(Qiniu.Storage.FormUploader)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimFormUploader.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimFormUploader.AllInstances.UploadDataByteArrayStringStringPutExtra">
            <summary>设置 FormUploader.UploadData(Byte[] data, String key, String token, PutExtra extra) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimFormUploader.AllInstances.UploadFileStringStringStringPutExtra">
            <summary>设置 FormUploader.UploadFile(String localFile, String key, String token, PutExtra extra) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimFormUploader.AllInstances.UploadStreamStreamStringStringPutExtra">
            <summary>设置 FormUploader.UploadStream(Stream stream, String key, String token, PutExtra putExtra) 的 填充码</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimFormUploader.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimFormUploader.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimFormUploader.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimFormUploader.ConstructorConfig">
            <summary>设置 FormUploader.FormUploader(Config config) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimFormUploader.DefaultUploadController">
            <summary>设置 FormUploader.DefaultUploadController() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimFormUploader.DefaultUploadProgressHandlerInt64Int64">
            <summary>设置 FormUploader.DefaultUploadProgressHandler(Int64 uploadedBytes, Int64 totalBytes) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimFormUploader.UploadDataByteArrayStringStringPutExtra">
            <summary>设置 FormUploader.UploadData(Byte[] data, String key, String token, PutExtra extra) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimFormUploader.UploadFileStringStringStringPutExtra">
            <summary>设置 FormUploader.UploadFile(String localFile, String key, String token, PutExtra extra) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimFormUploader.UploadStreamStreamStringStringPutExtra">
            <summary>设置 FormUploader.UploadStream(Stream stream, String key, String token, PutExtra putExtra) 的 填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimListInfo">
            <summary>Qiniu.Storage.ListInfo 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimListInfo.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimListInfo.#ctor(Qiniu.Storage.ListInfo)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimListInfo.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimListInfo.AllInstances.CommonPrefixesGet">
            <summary>设置 ListInfo.get_CommonPrefixes() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimListInfo.AllInstances.CommonPrefixesSetListOfString">
            <summary>设置 ListInfo.set_CommonPrefixes(List`1&lt;String&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimListInfo.AllInstances.ItemsGet">
            <summary>设置 ListInfo.get_Items() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimListInfo.AllInstances.ItemsSetListOfListItem">
            <summary>设置 ListInfo.set_Items(List`1&lt;ListItem&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimListInfo.AllInstances.MarkerGet">
            <summary>设置 ListInfo.get_Marker() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimListInfo.AllInstances.MarkerSetString">
            <summary>设置 ListInfo.set_Marker(String value) 的 填充码</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimListInfo.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimListInfo.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimListInfo.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimListInfo.CommonPrefixesGet">
            <summary>设置 ListInfo.get_CommonPrefixes() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimListInfo.CommonPrefixesSetListOfString">
            <summary>设置 ListInfo.set_CommonPrefixes(List`1&lt;String&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimListInfo.Constructor">
            <summary>设置 ListInfo.ListInfo() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimListInfo.ItemsGet">
            <summary>设置 ListInfo.get_Items() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimListInfo.ItemsSetListOfListItem">
            <summary>设置 ListInfo.set_Items(List`1&lt;ListItem&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimListInfo.MarkerGet">
            <summary>设置 ListInfo.get_Marker() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimListInfo.MarkerSetString">
            <summary>设置 ListInfo.set_Marker(String value) 的 填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimListItem">
            <summary>Qiniu.Storage.ListItem 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimListItem.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimListItem.#ctor(Qiniu.Storage.ListItem)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimListItem.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimListItem.AllInstances.EndUserGet">
            <summary>设置 ListItem.get_EndUser() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimListItem.AllInstances.EndUserSetString">
            <summary>设置 ListItem.set_EndUser(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimListItem.AllInstances.FileTypeGet">
            <summary>设置 ListItem.get_FileType() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimListItem.AllInstances.FileTypeSetInt32">
            <summary>设置 ListItem.set_FileType(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimListItem.AllInstances.FsizeGet">
            <summary>设置 ListItem.get_Fsize() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimListItem.AllInstances.FsizeSetInt64">
            <summary>设置 ListItem.set_Fsize(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimListItem.AllInstances.HashGet">
            <summary>设置 ListItem.get_Hash() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimListItem.AllInstances.HashSetString">
            <summary>设置 ListItem.set_Hash(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimListItem.AllInstances.KeyGet">
            <summary>设置 ListItem.get_Key() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimListItem.AllInstances.KeySetString">
            <summary>设置 ListItem.set_Key(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimListItem.AllInstances.MimeTypeGet">
            <summary>设置 ListItem.get_MimeType() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimListItem.AllInstances.MimeTypeSetString">
            <summary>设置 ListItem.set_MimeType(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimListItem.AllInstances.PutTimeGet">
            <summary>设置 ListItem.get_PutTime() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimListItem.AllInstances.PutTimeSetInt64">
            <summary>设置 ListItem.set_PutTime(Int64 value) 的 填充码</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimListItem.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimListItem.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimListItem.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimListItem.Constructor">
            <summary>设置 ListItem.ListItem() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimListItem.EndUserGet">
            <summary>设置 ListItem.get_EndUser() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimListItem.EndUserSetString">
            <summary>设置 ListItem.set_EndUser(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimListItem.FileTypeGet">
            <summary>设置 ListItem.get_FileType() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimListItem.FileTypeSetInt32">
            <summary>设置 ListItem.set_FileType(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimListItem.FsizeGet">
            <summary>设置 ListItem.get_Fsize() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimListItem.FsizeSetInt64">
            <summary>设置 ListItem.set_Fsize(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimListItem.HashGet">
            <summary>设置 ListItem.get_Hash() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimListItem.HashSetString">
            <summary>设置 ListItem.set_Hash(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimListItem.KeyGet">
            <summary>设置 ListItem.get_Key() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimListItem.KeySetString">
            <summary>设置 ListItem.set_Key(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimListItem.MimeTypeGet">
            <summary>设置 ListItem.get_MimeType() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimListItem.MimeTypeSetString">
            <summary>设置 ListItem.set_MimeType(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimListItem.PutTimeGet">
            <summary>设置 ListItem.get_PutTime() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimListItem.PutTimeSetInt64">
            <summary>设置 ListItem.set_PutTime(Int64 value) 的 填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimListResult">
            <summary>Qiniu.Storage.ListResult 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimListResult.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimListResult.#ctor(Qiniu.Storage.ListResult)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimListResult.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimListResult.AllInstances.ResultGet">
            <summary>设置 ListResult.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimListResult.AllInstances.ToString01">
            <summary>设置 ListResult.ToString() 的 填充码</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimListResult.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimListResult.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimListResult.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimListResult.Constructor">
            <summary>设置 ListResult.ListResult() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimListResult.ResultGet">
            <summary>设置 ListResult.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimListResult.ToString">
            <summary>设置 ListResult.ToString() 的 填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimOperationManager">
            <summary>Qiniu.Storage.OperationManager 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimOperationManager.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimOperationManager.#ctor(Qiniu.Storage.OperationManager)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimOperationManager.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimOperationManager.AllInstances.DfopDataStringString">
            <summary>设置 OperationManager.DfopData(String fop, String localFile) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimOperationManager.AllInstances.DfopStringString">
            <summary>设置 OperationManager.Dfop(String fop, String uri) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimOperationManager.AllInstances.DfopTextFileStringString">
            <summary>设置 OperationManager.DfopTextFile(String fop, String textFile) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimOperationManager.AllInstances.DfopTextStringString">
            <summary>设置 OperationManager.DfopText(String fop, String text) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimOperationManager.AllInstances.DfopUrlStringString">
            <summary>设置 OperationManager.DfopUrl(String fop, String url) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimOperationManager.AllInstances.PfopStringStringStringArrayStringStringBoolean">
            <summary>设置 OperationManager.Pfop(String bucket, String key, String[] fops, String pipeline, String notifyUrl, Boolean force) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimOperationManager.AllInstances.PfopStringStringStringStringStringBoolean">
            <summary>设置 OperationManager.Pfop(String bucket, String key, String fops, String pipeline, String notifyUrl, Boolean force) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimOperationManager.AllInstances.PrefopString">
            <summary>设置 OperationManager.Prefop(String persistentId) 的 填充码</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimOperationManager.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimOperationManager.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimOperationManager.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimOperationManager.ConstructorMacConfig">
            <summary>设置 OperationManager.OperationManager(Mac mac, Config config) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimOperationManager.DfopDataStringString">
            <summary>设置 OperationManager.DfopData(String fop, String localFile) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimOperationManager.DfopStringString">
            <summary>设置 OperationManager.Dfop(String fop, String uri) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimOperationManager.DfopTextFileStringString">
            <summary>设置 OperationManager.DfopTextFile(String fop, String textFile) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimOperationManager.DfopTextStringString">
            <summary>设置 OperationManager.DfopText(String fop, String text) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimOperationManager.DfopUrlStringString">
            <summary>设置 OperationManager.DfopUrl(String fop, String url) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimOperationManager.PfopStringStringStringArrayStringStringBoolean">
            <summary>设置 OperationManager.Pfop(String bucket, String key, String[] fops, String pipeline, String notifyUrl, Boolean force) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimOperationManager.PfopStringStringStringStringStringBoolean">
            <summary>设置 OperationManager.Pfop(String bucket, String key, String fops, String pipeline, String notifyUrl, Boolean force) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimOperationManager.PrefopString">
            <summary>设置 OperationManager.Prefop(String persistentId) 的 填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimPfopInfo">
            <summary>Qiniu.Storage.PfopInfo 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimPfopInfo.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimPfopInfo.#ctor(Qiniu.Storage.PfopInfo)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimPfopInfo.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimPfopInfo.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimPfopInfo.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPfopInfo.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPfopInfo.Constructor">
            <summary>设置 PfopInfo.PfopInfo() 的 填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimPfopItems">
            <summary>Qiniu.Storage.PfopItems 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimPfopItems.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimPfopItems.#ctor(Qiniu.Storage.PfopItems)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimPfopItems.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimPfopItems.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimPfopItems.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPfopItems.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPfopItems.Constructor">
            <summary>设置 PfopItems.PfopItems() 的 填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimPfopResult">
            <summary>Qiniu.Storage.PfopResult 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimPfopResult.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimPfopResult.#ctor(Qiniu.Storage.PfopResult)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimPfopResult.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPfopResult.AllInstances.PersistentIdGet">
            <summary>设置 PfopResult.get_PersistentId() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPfopResult.AllInstances.ToString01">
            <summary>设置 PfopResult.ToString() 的 填充码</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimPfopResult.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimPfopResult.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPfopResult.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPfopResult.Constructor">
            <summary>设置 PfopResult.PfopResult() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPfopResult.PersistentIdGet">
            <summary>设置 PfopResult.get_PersistentId() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPfopResult.ToString">
            <summary>设置 PfopResult.ToString() 的 填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimPrefopResult">
            <summary>Qiniu.Storage.PrefopResult 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimPrefopResult.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimPrefopResult.#ctor(Qiniu.Storage.PrefopResult)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimPrefopResult.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPrefopResult.AllInstances.ResultGet">
            <summary>设置 PrefopResult.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPrefopResult.AllInstances.ToString01">
            <summary>设置 PrefopResult.ToString() 的 填充码</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimPrefopResult.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimPrefopResult.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPrefopResult.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPrefopResult.Constructor">
            <summary>设置 PrefopResult.PrefopResult() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPrefopResult.ResultGet">
            <summary>设置 PrefopResult.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPrefopResult.ToString">
            <summary>设置 PrefopResult.ToString() 的 填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimPutExtra">
            <summary>Qiniu.Storage.PutExtra 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimPutExtra.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimPutExtra.#ctor(Qiniu.Storage.PutExtra)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimPutExtra.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutExtra.AllInstances.BlockUploadThreadsGet">
            <summary>设置 PutExtra.get_BlockUploadThreads() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutExtra.AllInstances.BlockUploadThreadsSetInt32">
            <summary>设置 PutExtra.set_BlockUploadThreads(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutExtra.AllInstances.MaxRetryTimesGet">
            <summary>设置 PutExtra.get_MaxRetryTimes() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutExtra.AllInstances.MaxRetryTimesSetInt32">
            <summary>设置 PutExtra.set_MaxRetryTimes(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutExtra.AllInstances.MimeTypeGet">
            <summary>设置 PutExtra.get_MimeType() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutExtra.AllInstances.MimeTypeSetString">
            <summary>设置 PutExtra.set_MimeType(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutExtra.AllInstances.ProgressHandlerGet">
            <summary>设置 PutExtra.get_ProgressHandler() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutExtra.AllInstances.ProgressHandlerSetUploadProgressHandler">
            <summary>设置 PutExtra.set_ProgressHandler(UploadProgressHandler value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutExtra.AllInstances.ResumeRecordFileGet">
            <summary>设置 PutExtra.get_ResumeRecordFile() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutExtra.AllInstances.ResumeRecordFileSetString">
            <summary>设置 PutExtra.set_ResumeRecordFile(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutExtra.AllInstances.UploadControllerGet">
            <summary>设置 PutExtra.get_UploadController() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutExtra.AllInstances.UploadControllerSetUploadController">
            <summary>设置 PutExtra.set_UploadController(UploadController value) 的 填充码</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimPutExtra.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimPutExtra.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutExtra.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutExtra.BlockUploadThreadsGet">
            <summary>设置 PutExtra.get_BlockUploadThreads() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutExtra.BlockUploadThreadsSetInt32">
            <summary>设置 PutExtra.set_BlockUploadThreads(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutExtra.Constructor">
            <summary>设置 PutExtra.PutExtra() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutExtra.MaxRetryTimesGet">
            <summary>设置 PutExtra.get_MaxRetryTimes() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutExtra.MaxRetryTimesSetInt32">
            <summary>设置 PutExtra.set_MaxRetryTimes(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutExtra.MimeTypeGet">
            <summary>设置 PutExtra.get_MimeType() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutExtra.MimeTypeSetString">
            <summary>设置 PutExtra.set_MimeType(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutExtra.ProgressHandlerGet">
            <summary>设置 PutExtra.get_ProgressHandler() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutExtra.ProgressHandlerSetUploadProgressHandler">
            <summary>设置 PutExtra.set_ProgressHandler(UploadProgressHandler value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutExtra.ResumeRecordFileGet">
            <summary>设置 PutExtra.get_ResumeRecordFile() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutExtra.ResumeRecordFileSetString">
            <summary>设置 PutExtra.set_ResumeRecordFile(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutExtra.UploadControllerGet">
            <summary>设置 PutExtra.get_UploadController() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutExtra.UploadControllerSetUploadController">
            <summary>设置 PutExtra.set_UploadController(UploadController value) 的 填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimPutPolicy">
            <summary>Qiniu.Storage.PutPolicy 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimPutPolicy.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimPutPolicy.#ctor(Qiniu.Storage.PutPolicy)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimPutPolicy.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.AllInstances.CallbackBodyGet">
            <summary>设置 PutPolicy.get_CallbackBody() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.AllInstances.CallbackBodySetString">
            <summary>设置 PutPolicy.set_CallbackBody(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.AllInstances.CallbackBodyTypeGet">
            <summary>设置 PutPolicy.get_CallbackBodyType() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.AllInstances.CallbackBodyTypeSetString">
            <summary>设置 PutPolicy.set_CallbackBodyType(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.AllInstances.CallbackFetchKeyGet">
            <summary>设置 PutPolicy.get_CallbackFetchKey() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.AllInstances.CallbackFetchKeySetNullableOfInt32">
            <summary>设置 PutPolicy.set_CallbackFetchKey(Nullable`1&lt;Int32&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.AllInstances.CallbackHostGet">
            <summary>设置 PutPolicy.get_CallbackHost() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.AllInstances.CallbackHostSetString">
            <summary>设置 PutPolicy.set_CallbackHost(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.AllInstances.CallbackUrlGet">
            <summary>设置 PutPolicy.get_CallbackUrl() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.AllInstances.CallbackUrlSetString">
            <summary>设置 PutPolicy.set_CallbackUrl(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.AllInstances.DeadlineGet">
            <summary>设置 PutPolicy.get_Deadline() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.AllInstances.DeadlineSetInt32">
            <summary>设置 PutPolicy.set_Deadline(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.AllInstances.DeleteAfterDaysGet">
            <summary>设置 PutPolicy.get_DeleteAfterDays() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.AllInstances.DeleteAfterDaysSetNullableOfInt32">
            <summary>设置 PutPolicy.set_DeleteAfterDays(Nullable`1&lt;Int32&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.AllInstances.DetectMimeGet">
            <summary>设置 PutPolicy.get_DetectMime() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.AllInstances.DetectMimeSetNullableOfInt32">
            <summary>设置 PutPolicy.set_DetectMime(Nullable`1&lt;Int32&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.AllInstances.EndUserGet">
            <summary>设置 PutPolicy.get_EndUser() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.AllInstances.EndUserSetString">
            <summary>设置 PutPolicy.set_EndUser(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.AllInstances.FileTypeGet">
            <summary>设置 PutPolicy.get_FileType() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.AllInstances.FileTypeSetNullableOfInt32">
            <summary>设置 PutPolicy.set_FileType(Nullable`1&lt;Int32&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.AllInstances.FsizeLimitGet">
            <summary>设置 PutPolicy.get_FsizeLimit() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.AllInstances.FsizeLimitSetNullableOfInt32">
            <summary>设置 PutPolicy.set_FsizeLimit(Nullable`1&lt;Int32&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.AllInstances.FsizeMinGet">
            <summary>设置 PutPolicy.get_FsizeMin() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.AllInstances.FsizeMinSetNullableOfInt32">
            <summary>设置 PutPolicy.set_FsizeMin(Nullable`1&lt;Int32&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.AllInstances.InsertOnlyGet">
            <summary>设置 PutPolicy.get_InsertOnly() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.AllInstances.InsertOnlySetNullableOfInt32">
            <summary>设置 PutPolicy.set_InsertOnly(Nullable`1&lt;Int32&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.AllInstances.MimeLimitGet">
            <summary>设置 PutPolicy.get_MimeLimit() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.AllInstances.MimeLimitSetString">
            <summary>设置 PutPolicy.set_MimeLimit(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.AllInstances.PersistentNotifyUrlGet">
            <summary>设置 PutPolicy.get_PersistentNotifyUrl() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.AllInstances.PersistentNotifyUrlSetString">
            <summary>设置 PutPolicy.set_PersistentNotifyUrl(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.AllInstances.PersistentOpsGet">
            <summary>设置 PutPolicy.get_PersistentOps() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.AllInstances.PersistentOpsSetString">
            <summary>设置 PutPolicy.set_PersistentOps(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.AllInstances.PersistentPipelineGet">
            <summary>设置 PutPolicy.get_PersistentPipeline() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.AllInstances.PersistentPipelineSetString">
            <summary>设置 PutPolicy.set_PersistentPipeline(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.AllInstances.ReturnBodyGet">
            <summary>设置 PutPolicy.get_ReturnBody() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.AllInstances.ReturnBodySetString">
            <summary>设置 PutPolicy.set_ReturnBody(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.AllInstances.ReturnUrlGet">
            <summary>设置 PutPolicy.get_ReturnUrl() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.AllInstances.ReturnUrlSetString">
            <summary>设置 PutPolicy.set_ReturnUrl(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.AllInstances.SaveKeyGet">
            <summary>设置 PutPolicy.get_SaveKey() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.AllInstances.SaveKeySetString">
            <summary>设置 PutPolicy.set_SaveKey(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.AllInstances.ScopeGet">
            <summary>设置 PutPolicy.get_Scope() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.AllInstances.ScopeSetString">
            <summary>设置 PutPolicy.set_Scope(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.AllInstances.SetExpiresInt32">
            <summary>设置 PutPolicy.SetExpires(Int32 expireInSeconds) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.AllInstances.ToJsonString">
            <summary>设置 PutPolicy.ToJsonString() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.AllInstances.isPrefixalScopeGet">
            <summary>设置 PutPolicy.get_isPrefixalScope() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.AllInstances.isPrefixalScopeSetNullableOfInt32">
            <summary>设置 PutPolicy.set_isPrefixalScope(Nullable`1&lt;Int32&gt; value) 的 填充码</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimPutPolicy.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimPutPolicy.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.CallbackBodyGet">
            <summary>设置 PutPolicy.get_CallbackBody() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.CallbackBodySetString">
            <summary>设置 PutPolicy.set_CallbackBody(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.CallbackBodyTypeGet">
            <summary>设置 PutPolicy.get_CallbackBodyType() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.CallbackBodyTypeSetString">
            <summary>设置 PutPolicy.set_CallbackBodyType(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.CallbackFetchKeyGet">
            <summary>设置 PutPolicy.get_CallbackFetchKey() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.CallbackFetchKeySetNullableOfInt32">
            <summary>设置 PutPolicy.set_CallbackFetchKey(Nullable`1&lt;Int32&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.CallbackHostGet">
            <summary>设置 PutPolicy.get_CallbackHost() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.CallbackHostSetString">
            <summary>设置 PutPolicy.set_CallbackHost(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.CallbackUrlGet">
            <summary>设置 PutPolicy.get_CallbackUrl() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.CallbackUrlSetString">
            <summary>设置 PutPolicy.set_CallbackUrl(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.Constructor">
            <summary>设置 PutPolicy.PutPolicy() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.DeadlineGet">
            <summary>设置 PutPolicy.get_Deadline() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.DeadlineSetInt32">
            <summary>设置 PutPolicy.set_Deadline(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.DeleteAfterDaysGet">
            <summary>设置 PutPolicy.get_DeleteAfterDays() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.DeleteAfterDaysSetNullableOfInt32">
            <summary>设置 PutPolicy.set_DeleteAfterDays(Nullable`1&lt;Int32&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.DetectMimeGet">
            <summary>设置 PutPolicy.get_DetectMime() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.DetectMimeSetNullableOfInt32">
            <summary>设置 PutPolicy.set_DetectMime(Nullable`1&lt;Int32&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.EndUserGet">
            <summary>设置 PutPolicy.get_EndUser() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.EndUserSetString">
            <summary>设置 PutPolicy.set_EndUser(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.FileTypeGet">
            <summary>设置 PutPolicy.get_FileType() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.FileTypeSetNullableOfInt32">
            <summary>设置 PutPolicy.set_FileType(Nullable`1&lt;Int32&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.FsizeLimitGet">
            <summary>设置 PutPolicy.get_FsizeLimit() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.FsizeLimitSetNullableOfInt32">
            <summary>设置 PutPolicy.set_FsizeLimit(Nullable`1&lt;Int32&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.FsizeMinGet">
            <summary>设置 PutPolicy.get_FsizeMin() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.FsizeMinSetNullableOfInt32">
            <summary>设置 PutPolicy.set_FsizeMin(Nullable`1&lt;Int32&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.InsertOnlyGet">
            <summary>设置 PutPolicy.get_InsertOnly() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.InsertOnlySetNullableOfInt32">
            <summary>设置 PutPolicy.set_InsertOnly(Nullable`1&lt;Int32&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.MimeLimitGet">
            <summary>设置 PutPolicy.get_MimeLimit() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.MimeLimitSetString">
            <summary>设置 PutPolicy.set_MimeLimit(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.PersistentNotifyUrlGet">
            <summary>设置 PutPolicy.get_PersistentNotifyUrl() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.PersistentNotifyUrlSetString">
            <summary>设置 PutPolicy.set_PersistentNotifyUrl(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.PersistentOpsGet">
            <summary>设置 PutPolicy.get_PersistentOps() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.PersistentOpsSetString">
            <summary>设置 PutPolicy.set_PersistentOps(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.PersistentPipelineGet">
            <summary>设置 PutPolicy.get_PersistentPipeline() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.PersistentPipelineSetString">
            <summary>设置 PutPolicy.set_PersistentPipeline(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.ReturnBodyGet">
            <summary>设置 PutPolicy.get_ReturnBody() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.ReturnBodySetString">
            <summary>设置 PutPolicy.set_ReturnBody(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.ReturnUrlGet">
            <summary>设置 PutPolicy.get_ReturnUrl() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.ReturnUrlSetString">
            <summary>设置 PutPolicy.set_ReturnUrl(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.SaveKeyGet">
            <summary>设置 PutPolicy.get_SaveKey() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.SaveKeySetString">
            <summary>设置 PutPolicy.set_SaveKey(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.ScopeGet">
            <summary>设置 PutPolicy.get_Scope() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.ScopeSetString">
            <summary>设置 PutPolicy.set_Scope(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.SetExpiresInt32">
            <summary>设置 PutPolicy.SetExpires(Int32 expireInSeconds) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.ToJsonString">
            <summary>设置 PutPolicy.ToJsonString() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.isPrefixalScopeGet">
            <summary>设置 PutPolicy.get_isPrefixalScope() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimPutPolicy.isPrefixalScopeSetNullableOfInt32">
            <summary>设置 PutPolicy.set_isPrefixalScope(Nullable`1&lt;Int32&gt; value) 的 填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimResumableUploader">
            <summary>Qiniu.Storage.ResumableUploader 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimResumableUploader.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimResumableUploader.#ctor(Qiniu.Storage.ResumableUploader)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimResumableUploader.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumableUploader.AllInstances.MakeBlockObject">
            <summary>设置 ResumableUploader.MakeBlock(Object resumeBlockerObj) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumableUploader.AllInstances.MakeFileStringInt64StringStringPutExtraStringArray">
            <summary>设置 ResumableUploader.MakeFile(String fileName, Int64 size, String key, String upToken, PutExtra putExtra, String[] contexts) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumableUploader.AllInstances.UploadFileStringStringStringPutExtra">
            <summary>设置 ResumableUploader.UploadFile(String localFile, String key, String token, PutExtra putExtra) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumableUploader.AllInstances.UploadStreamStreamStringStringPutExtra">
            <summary>设置 ResumableUploader.UploadStream(Stream stream, String key, String upToken, PutExtra putExtra) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumableUploader.AllInstances.processMakeBlocksDictionaryOfInt64ByteArrayStringPutExtraResumeInfoDictionaryOfInt64HttpResultDictionaryOfStringInt64Int64">
            <summary>设置 ResumableUploader.processMakeBlocks(Dictionary`2&lt;Int64,Byte[]&gt; blockDataDict, String upToken, PutExtra putExtra, ResumeInfo resumeInfo, Dictionary`2&lt;Int64,HttpResult&gt; blockMakeResults, Dictionary`2&lt;String,Int64&gt; uploadedBytesDict, Int64 fileSize) 的 填充码</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimResumableUploader.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimResumableUploader.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumableUploader.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumableUploader.ConstructorConfig">
            <summary>设置 ResumableUploader.ResumableUploader(Config config) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumableUploader.DefaultUploadController">
            <summary>设置 ResumableUploader.DefaultUploadController() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumableUploader.DefaultUploadProgressHandlerInt64Int64">
            <summary>设置 ResumableUploader.DefaultUploadProgressHandler(Int64 uploadedBytes, Int64 totalBytes) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumableUploader.MakeBlockObject">
            <summary>设置 ResumableUploader.MakeBlock(Object resumeBlockerObj) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumableUploader.MakeFileStringInt64StringStringPutExtraStringArray">
            <summary>设置 ResumableUploader.MakeFile(String fileName, Int64 size, String key, String upToken, PutExtra putExtra, String[] contexts) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumableUploader.UploadFileStringStringStringPutExtra">
            <summary>设置 ResumableUploader.UploadFile(String localFile, String key, String token, PutExtra putExtra) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumableUploader.UploadStreamStreamStringStringPutExtra">
            <summary>设置 ResumableUploader.UploadStream(Stream stream, String key, String upToken, PutExtra putExtra) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumableUploader.processMakeBlocksDictionaryOfInt64ByteArrayStringPutExtraResumeInfoDictionaryOfInt64HttpResultDictionaryOfStringInt64Int64">
            <summary>设置 ResumableUploader.processMakeBlocks(Dictionary`2&lt;Int64,Byte[]&gt; blockDataDict, String upToken, PutExtra putExtra, ResumeInfo resumeInfo, Dictionary`2&lt;Int64,HttpResult&gt; blockMakeResults, Dictionary`2&lt;String,Int64&gt; uploadedBytesDict, Int64 fileSize) 的 填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimResumeChunk">
            <summary>Qiniu.Storage.ResumeChunk 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimResumeChunk.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimResumeChunk.#ctor(Qiniu.Storage.ResumeChunk)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimResumeChunk.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimResumeChunk.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimResumeChunk.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumeChunk.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumeChunk.Constructor">
            <summary>设置 ResumeChunk.ResumeChunk() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumeChunk.GetChunkSizeChunkUnit">
            <summary>设置 ResumeChunk.GetChunkSize(ChunkUnit cu) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumeChunk.GetChunkUnitInt32">
            <summary>设置 ResumeChunk.GetChunkUnit(Int32 chunkSize) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumeChunk.StaticConstructor">
            <summary>设置 ResumeChunk.ResumeChunk() 的 填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimResumeContext">
            <summary>Qiniu.Storage.ResumeContext 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimResumeContext.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimResumeContext.#ctor(Qiniu.Storage.ResumeContext)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimResumeContext.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumeContext.AllInstances.ChecksumGet">
            <summary>设置 ResumeContext.get_Checksum() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumeContext.AllInstances.ChecksumSetString">
            <summary>设置 ResumeContext.set_Checksum(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumeContext.AllInstances.Crc32Get">
            <summary>设置 ResumeContext.get_Crc32() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumeContext.AllInstances.Crc32SetUInt32">
            <summary>设置 ResumeContext.set_Crc32(UInt32 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumeContext.AllInstances.CtxGet">
            <summary>设置 ResumeContext.get_Ctx() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumeContext.AllInstances.CtxSetString">
            <summary>设置 ResumeContext.set_Ctx(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumeContext.AllInstances.ExpiredAtGet">
            <summary>设置 ResumeContext.get_ExpiredAt() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumeContext.AllInstances.ExpiredAtSetInt64">
            <summary>设置 ResumeContext.set_ExpiredAt(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumeContext.AllInstances.HostGet">
            <summary>设置 ResumeContext.get_Host() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumeContext.AllInstances.HostSetString">
            <summary>设置 ResumeContext.set_Host(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumeContext.AllInstances.OffsetGet">
            <summary>设置 ResumeContext.get_Offset() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumeContext.AllInstances.OffsetSetInt64">
            <summary>设置 ResumeContext.set_Offset(Int64 value) 的 填充码</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimResumeContext.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimResumeContext.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumeContext.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumeContext.ChecksumGet">
            <summary>设置 ResumeContext.get_Checksum() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumeContext.ChecksumSetString">
            <summary>设置 ResumeContext.set_Checksum(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumeContext.Constructor">
            <summary>设置 ResumeContext.ResumeContext() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumeContext.Crc32Get">
            <summary>设置 ResumeContext.get_Crc32() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumeContext.Crc32SetUInt32">
            <summary>设置 ResumeContext.set_Crc32(UInt32 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumeContext.CtxGet">
            <summary>设置 ResumeContext.get_Ctx() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumeContext.CtxSetString">
            <summary>设置 ResumeContext.set_Ctx(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumeContext.ExpiredAtGet">
            <summary>设置 ResumeContext.get_ExpiredAt() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumeContext.ExpiredAtSetInt64">
            <summary>设置 ResumeContext.set_ExpiredAt(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumeContext.HostGet">
            <summary>设置 ResumeContext.get_Host() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumeContext.HostSetString">
            <summary>设置 ResumeContext.set_Host(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumeContext.OffsetGet">
            <summary>设置 ResumeContext.get_Offset() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumeContext.OffsetSetInt64">
            <summary>设置 ResumeContext.set_Offset(Int64 value) 的 填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimResumeHelper">
            <summary>Qiniu.Storage.ResumeHelper 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimResumeHelper.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimResumeHelper.#ctor(Qiniu.Storage.ResumeHelper)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimResumeHelper.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimResumeHelper.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimResumeHelper.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumeHelper.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumeHelper.Constructor">
            <summary>设置 ResumeHelper.ResumeHelper() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumeHelper.GetDefaultRecordKeyStringString">
            <summary>设置 ResumeHelper.GetDefaultRecordKey(String localFile, String key) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumeHelper.LoadString">
            <summary>设置 ResumeHelper.Load(String recordFile) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumeHelper.SaveResumeInfoString">
            <summary>设置 ResumeHelper.Save(ResumeInfo resumeInfo, String recordFile) 的 填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimResumeInfo">
            <summary>Qiniu.Storage.ResumeInfo 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimResumeInfo.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimResumeInfo.#ctor(Qiniu.Storage.ResumeInfo)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimResumeInfo.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumeInfo.AllInstances.BlockCountGet">
            <summary>设置 ResumeInfo.get_BlockCount() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumeInfo.AllInstances.BlockCountSetInt64">
            <summary>设置 ResumeInfo.set_BlockCount(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumeInfo.AllInstances.ContextsGet">
            <summary>设置 ResumeInfo.get_Contexts() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumeInfo.AllInstances.ContextsSetStringArray">
            <summary>设置 ResumeInfo.set_Contexts(String[] value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumeInfo.AllInstances.ExpiredAtGet">
            <summary>设置 ResumeInfo.get_ExpiredAt() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumeInfo.AllInstances.ExpiredAtSetInt64">
            <summary>设置 ResumeInfo.set_ExpiredAt(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumeInfo.AllInstances.FileSizeGet">
            <summary>设置 ResumeInfo.get_FileSize() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumeInfo.AllInstances.FileSizeSetInt64">
            <summary>设置 ResumeInfo.set_FileSize(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumeInfo.AllInstances.ToJsonStr">
            <summary>设置 ResumeInfo.ToJsonStr() 的 填充码</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimResumeInfo.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimResumeInfo.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumeInfo.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumeInfo.BlockCountGet">
            <summary>设置 ResumeInfo.get_BlockCount() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumeInfo.BlockCountSetInt64">
            <summary>设置 ResumeInfo.set_BlockCount(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumeInfo.Constructor">
            <summary>设置 ResumeInfo.ResumeInfo() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumeInfo.ContextsGet">
            <summary>设置 ResumeInfo.get_Contexts() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumeInfo.ContextsSetStringArray">
            <summary>设置 ResumeInfo.set_Contexts(String[] value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumeInfo.ExpiredAtGet">
            <summary>设置 ResumeInfo.get_ExpiredAt() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumeInfo.ExpiredAtSetInt64">
            <summary>设置 ResumeInfo.set_ExpiredAt(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumeInfo.FileSizeGet">
            <summary>设置 ResumeInfo.get_FileSize() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumeInfo.FileSizeSetInt64">
            <summary>设置 ResumeInfo.set_FileSize(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimResumeInfo.ToJsonStr">
            <summary>设置 ResumeInfo.ToJsonStr() 的 填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimStatResult">
            <summary>Qiniu.Storage.StatResult 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimStatResult.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimStatResult.#ctor(Qiniu.Storage.StatResult)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimStatResult.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimStatResult.AllInstances.ResultGet">
            <summary>设置 StatResult.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimStatResult.AllInstances.ToString01">
            <summary>设置 StatResult.ToString() 的 填充码</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimStatResult.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimStatResult.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimStatResult.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimStatResult.Constructor">
            <summary>设置 StatResult.StatResult() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimStatResult.ResultGet">
            <summary>设置 StatResult.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimStatResult.ToString">
            <summary>设置 StatResult.ToString() 的 填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimUploadManager">
            <summary>Qiniu.Storage.UploadManager 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimUploadManager.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimUploadManager.#ctor(Qiniu.Storage.UploadManager)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimUploadManager.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimUploadManager.AllInstances.UploadDataByteArrayStringStringPutExtra">
            <summary>设置 UploadManager.UploadData(Byte[] data, String key, String token, PutExtra extra) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimUploadManager.AllInstances.UploadFileStringStringStringPutExtra">
            <summary>设置 UploadManager.UploadFile(String localFile, String key, String token, PutExtra extra) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimUploadManager.AllInstances.UploadStreamStreamStringStringPutExtra">
            <summary>设置 UploadManager.UploadStream(Stream stream, String key, String token, PutExtra extra) 的 填充码</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimUploadManager.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimUploadManager.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimUploadManager.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimUploadManager.ConstructorConfig">
            <summary>设置 UploadManager.UploadManager(Config config) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimUploadManager.UploadDataByteArrayStringStringPutExtra">
            <summary>设置 UploadManager.UploadData(Byte[] data, String key, String token, PutExtra extra) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimUploadManager.UploadFileStringStringStringPutExtra">
            <summary>设置 UploadManager.UploadFile(String localFile, String key, String token, PutExtra extra) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimUploadManager.UploadStreamStreamStringStringPutExtra">
            <summary>设置 UploadManager.UploadStream(Stream stream, String key, String token, PutExtra extra) 的 填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimZone">
            <summary>Qiniu.Storage.Zone 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimZone.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimZone.#ctor(Qiniu.Storage.Zone)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimZone.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimZone.AllInstances.ApiHostGet">
            <summary>设置 Zone.get_ApiHost() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimZone.AllInstances.ApiHostSetString">
            <summary>设置 Zone.set_ApiHost(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimZone.AllInstances.CdnUpHostsGet">
            <summary>设置 Zone.get_CdnUpHosts() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimZone.AllInstances.CdnUpHostsSetStringArray">
            <summary>设置 Zone.set_CdnUpHosts(String[] value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimZone.AllInstances.IovipHostGet">
            <summary>设置 Zone.get_IovipHost() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimZone.AllInstances.IovipHostSetString">
            <summary>设置 Zone.set_IovipHost(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimZone.AllInstances.RsHostGet">
            <summary>设置 Zone.get_RsHost() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimZone.AllInstances.RsHostSetString">
            <summary>设置 Zone.set_RsHost(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimZone.AllInstances.RsfHostGet">
            <summary>设置 Zone.get_RsfHost() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimZone.AllInstances.RsfHostSetString">
            <summary>设置 Zone.set_RsfHost(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimZone.AllInstances.SrcUpHostsGet">
            <summary>设置 Zone.get_SrcUpHosts() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimZone.AllInstances.SrcUpHostsSetStringArray">
            <summary>设置 Zone.set_SrcUpHosts(String[] value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimZone.ApiHostGet">
            <summary>设置 Zone.get_ApiHost() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimZone.ApiHostSetString">
            <summary>设置 Zone.set_ApiHost(String value) 的 填充码</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimZone.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimZone.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimZone.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimZone.CdnUpHostsGet">
            <summary>设置 Zone.get_CdnUpHosts() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimZone.CdnUpHostsSetStringArray">
            <summary>设置 Zone.set_CdnUpHosts(String[] value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimZone.Constructor">
            <summary>设置 Zone.Zone() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimZone.IovipHostGet">
            <summary>设置 Zone.get_IovipHost() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimZone.IovipHostSetString">
            <summary>设置 Zone.set_IovipHost(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimZone.RsHostGet">
            <summary>设置 Zone.get_RsHost() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimZone.RsHostSetString">
            <summary>设置 Zone.set_RsHost(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimZone.RsfHostGet">
            <summary>设置 Zone.get_RsfHost() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimZone.RsfHostSetString">
            <summary>设置 Zone.set_RsfHost(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimZone.SrcUpHostsGet">
            <summary>设置 Zone.get_SrcUpHosts() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimZone.SrcUpHostsSetStringArray">
            <summary>设置 Zone.set_SrcUpHosts(String[] value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimZone.StaticConstructor">
            <summary>设置 Zone.Zone() 的 填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimZoneHelper">
            <summary>Qiniu.Storage.ZoneHelper 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimZoneHelper.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimZoneHelper.#ctor(Qiniu.Storage.ZoneHelper)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.ShimZoneHelper.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimZoneHelper.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.ShimZoneHelper.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimZoneHelper.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimZoneHelper.Constructor">
            <summary>设置 ZoneHelper.ZoneHelper() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimZoneHelper.QueryZoneStringString">
            <summary>设置 ZoneHelper.QueryZone(String accessKey, String bucket) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.ShimZoneHelper.StaticConstructor">
            <summary>设置 ZoneHelper.ZoneHelper() 的 填充码</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.StubBatchData">
            <summary>Qiniu.Storage.BatchData 的存根类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubBatchData.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubBatchData.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubBatchData.InitializeStub">
            <summary>初始化 type StubBatchData 的新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubBatchData.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubBatchData.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.StubBatchInfo">
            <summary>Qiniu.Storage.BatchInfo 的存根类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubBatchInfo.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubBatchInfo.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubBatchInfo.InitializeStub">
            <summary>初始化 type StubBatchInfo 的新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubBatchInfo.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubBatchInfo.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.StubBatchResult">
            <summary>Qiniu.Storage.BatchResult 的存根类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubBatchResult.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubBatchResult.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubBatchResult.InitializeStub">
            <summary>初始化 type StubBatchResult 的新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubBatchResult.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubBatchResult.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubBatchResult.ToString">
            <summary>设置 BatchResult.ToString() 的 存根</summary>
        </member>
        <member name="F:Qiniu.Storage.Fakes.StubBatchResult.ToString01">
            <summary>设置 BatchResult.ToString() 的 stub</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.StubBucketInfo">
            <summary>Qiniu.Storage.BucketInfo 的存根类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubBucketInfo.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubBucketInfo.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubBucketInfo.InitializeStub">
            <summary>初始化 type StubBucketInfo 的新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubBucketInfo.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubBucketInfo.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.StubBucketManager">
            <summary>Qiniu.Storage.BucketManager 的存根类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubBucketManager.#ctor(Qiniu.Util.Mac,Qiniu.Storage.Config)">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubBucketManager.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubBucketManager.InitializeStub">
            <summary>初始化 type StubBucketManager 的新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubBucketManager.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubBucketManager.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.StubBucketResult">
            <summary>Qiniu.Storage.BucketResult 的存根类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubBucketResult.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubBucketResult.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubBucketResult.InitializeStub">
            <summary>初始化 type StubBucketResult 的新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubBucketResult.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubBucketResult.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubBucketResult.ToString">
            <summary>设置 BucketResult.ToString() 的 存根</summary>
        </member>
        <member name="F:Qiniu.Storage.Fakes.StubBucketResult.ToString01">
            <summary>设置 BucketResult.ToString() 的 stub</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.StubBucketsResult">
            <summary>Qiniu.Storage.BucketsResult 的存根类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubBucketsResult.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubBucketsResult.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubBucketsResult.InitializeStub">
            <summary>初始化 type StubBucketsResult 的新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubBucketsResult.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubBucketsResult.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubBucketsResult.ToString">
            <summary>设置 BucketsResult.ToString() 的 存根</summary>
        </member>
        <member name="F:Qiniu.Storage.Fakes.StubBucketsResult.ToString01">
            <summary>设置 BucketsResult.ToString() 的 stub</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.StubConfig">
            <summary>Qiniu.Storage.Config 的存根类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubConfig.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubConfig.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubConfig.InitializeStub">
            <summary>初始化 type StubConfig 的新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubConfig.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubConfig.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.StubDomainsResult">
            <summary>Qiniu.Storage.DomainsResult 的存根类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubDomainsResult.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubDomainsResult.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubDomainsResult.InitializeStub">
            <summary>初始化 type StubDomainsResult 的新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubDomainsResult.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubDomainsResult.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubDomainsResult.ToString">
            <summary>设置 DomainsResult.ToString() 的 存根</summary>
        </member>
        <member name="F:Qiniu.Storage.Fakes.StubDomainsResult.ToString01">
            <summary>设置 DomainsResult.ToString() 的 stub</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.StubDownloadManager">
            <summary>Qiniu.Storage.DownloadManager 的存根类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubDownloadManager.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubDownloadManager.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubDownloadManager.InitializeStub">
            <summary>初始化 type StubDownloadManager 的新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubDownloadManager.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubDownloadManager.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.StubFetchInfo">
            <summary>Qiniu.Storage.FetchInfo 的存根类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubFetchInfo.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubFetchInfo.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubFetchInfo.InitializeStub">
            <summary>初始化 type StubFetchInfo 的新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubFetchInfo.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubFetchInfo.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.StubFetchResult">
            <summary>Qiniu.Storage.FetchResult 的存根类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubFetchResult.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubFetchResult.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubFetchResult.InitializeStub">
            <summary>初始化 type StubFetchResult 的新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubFetchResult.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubFetchResult.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubFetchResult.ToString">
            <summary>设置 FetchResult.ToString() 的 存根</summary>
        </member>
        <member name="F:Qiniu.Storage.Fakes.StubFetchResult.ToString01">
            <summary>设置 FetchResult.ToString() 的 stub</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.StubFileInfo">
            <summary>Qiniu.Storage.FileInfo 的存根类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubFileInfo.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubFileInfo.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubFileInfo.InitializeStub">
            <summary>初始化 type StubFileInfo 的新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubFileInfo.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubFileInfo.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.StubFormUploader">
            <summary>Qiniu.Storage.FormUploader 的存根类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubFormUploader.#ctor(Qiniu.Storage.Config)">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubFormUploader.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubFormUploader.InitializeStub">
            <summary>初始化 type StubFormUploader 的新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubFormUploader.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubFormUploader.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.StubListInfo">
            <summary>Qiniu.Storage.ListInfo 的存根类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubListInfo.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubListInfo.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubListInfo.InitializeStub">
            <summary>初始化 type StubListInfo 的新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubListInfo.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubListInfo.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.StubListItem">
            <summary>Qiniu.Storage.ListItem 的存根类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubListItem.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubListItem.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubListItem.InitializeStub">
            <summary>初始化 type StubListItem 的新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubListItem.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubListItem.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.StubListResult">
            <summary>Qiniu.Storage.ListResult 的存根类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubListResult.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubListResult.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubListResult.InitializeStub">
            <summary>初始化 type StubListResult 的新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubListResult.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubListResult.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubListResult.ToString">
            <summary>设置 ListResult.ToString() 的 存根</summary>
        </member>
        <member name="F:Qiniu.Storage.Fakes.StubListResult.ToString01">
            <summary>设置 ListResult.ToString() 的 stub</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.StubOperationManager">
            <summary>Qiniu.Storage.OperationManager 的存根类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubOperationManager.#ctor(Qiniu.Util.Mac,Qiniu.Storage.Config)">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubOperationManager.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubOperationManager.InitializeStub">
            <summary>初始化 type StubOperationManager 的新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubOperationManager.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubOperationManager.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.StubPfopInfo">
            <summary>Qiniu.Storage.PfopInfo 的存根类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubPfopInfo.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubPfopInfo.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubPfopInfo.InitializeStub">
            <summary>初始化 type StubPfopInfo 的新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubPfopInfo.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubPfopInfo.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.StubPfopItems">
            <summary>Qiniu.Storage.PfopItems 的存根类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubPfopItems.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubPfopItems.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubPfopItems.InitializeStub">
            <summary>初始化 type StubPfopItems 的新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubPfopItems.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubPfopItems.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.StubPfopResult">
            <summary>Qiniu.Storage.PfopResult 的存根类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubPfopResult.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubPfopResult.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubPfopResult.InitializeStub">
            <summary>初始化 type StubPfopResult 的新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubPfopResult.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubPfopResult.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubPfopResult.ToString">
            <summary>设置 PfopResult.ToString() 的 存根</summary>
        </member>
        <member name="F:Qiniu.Storage.Fakes.StubPfopResult.ToString01">
            <summary>设置 PfopResult.ToString() 的 stub</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.StubPrefopResult">
            <summary>Qiniu.Storage.PrefopResult 的存根类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubPrefopResult.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubPrefopResult.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubPrefopResult.InitializeStub">
            <summary>初始化 type StubPrefopResult 的新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubPrefopResult.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubPrefopResult.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubPrefopResult.ToString">
            <summary>设置 PrefopResult.ToString() 的 存根</summary>
        </member>
        <member name="F:Qiniu.Storage.Fakes.StubPrefopResult.ToString01">
            <summary>设置 PrefopResult.ToString() 的 stub</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.StubPutExtra">
            <summary>Qiniu.Storage.PutExtra 的存根类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubPutExtra.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubPutExtra.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubPutExtra.InitializeStub">
            <summary>初始化 type StubPutExtra 的新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubPutExtra.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubPutExtra.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.StubPutPolicy">
            <summary>Qiniu.Storage.PutPolicy 的存根类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubPutPolicy.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubPutPolicy.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubPutPolicy.InitializeStub">
            <summary>初始化 type StubPutPolicy 的新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubPutPolicy.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubPutPolicy.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.StubResumableUploader">
            <summary>Qiniu.Storage.ResumableUploader 的存根类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubResumableUploader.#ctor(Qiniu.Storage.Config)">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubResumableUploader.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubResumableUploader.InitializeStub">
            <summary>初始化 type StubResumableUploader 的新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubResumableUploader.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubResumableUploader.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.StubResumeChunk">
            <summary>Qiniu.Storage.ResumeChunk 的存根类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubResumeChunk.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubResumeChunk.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubResumeChunk.InitializeStub">
            <summary>初始化 type StubResumeChunk 的新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubResumeChunk.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubResumeChunk.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.StubResumeContext">
            <summary>Qiniu.Storage.ResumeContext 的存根类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubResumeContext.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubResumeContext.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubResumeContext.InitializeStub">
            <summary>初始化 type StubResumeContext 的新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubResumeContext.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubResumeContext.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.StubResumeHelper">
            <summary>Qiniu.Storage.ResumeHelper 的存根类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubResumeHelper.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubResumeHelper.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubResumeHelper.InitializeStub">
            <summary>初始化 type StubResumeHelper 的新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubResumeHelper.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubResumeHelper.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.StubResumeInfo">
            <summary>Qiniu.Storage.ResumeInfo 的存根类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubResumeInfo.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubResumeInfo.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubResumeInfo.InitializeStub">
            <summary>初始化 type StubResumeInfo 的新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubResumeInfo.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubResumeInfo.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.StubStatResult">
            <summary>Qiniu.Storage.StatResult 的存根类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubStatResult.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubStatResult.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubStatResult.InitializeStub">
            <summary>初始化 type StubStatResult 的新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubStatResult.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubStatResult.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubStatResult.ToString">
            <summary>设置 StatResult.ToString() 的 存根</summary>
        </member>
        <member name="F:Qiniu.Storage.Fakes.StubStatResult.ToString01">
            <summary>设置 StatResult.ToString() 的 stub</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.StubUploadManager">
            <summary>Qiniu.Storage.UploadManager 的存根类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubUploadManager.#ctor(Qiniu.Storage.Config)">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubUploadManager.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubUploadManager.InitializeStub">
            <summary>初始化 type StubUploadManager 的新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubUploadManager.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubUploadManager.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.StubZone">
            <summary>Qiniu.Storage.Zone 的存根类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubZone.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubZone.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubZone.InitializeStub">
            <summary>初始化 type StubZone 的新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubZone.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubZone.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Qiniu.Storage.Fakes.StubZoneHelper">
            <summary>Qiniu.Storage.ZoneHelper 的存根类型</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubZoneHelper.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubZoneHelper.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.Storage.Fakes.StubZoneHelper.InitializeStub">
            <summary>初始化 type StubZoneHelper 的新实例</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubZoneHelper.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.Storage.Fakes.StubZoneHelper.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Qiniu.Util.Fakes.ShimAuth">
            <summary>Qiniu.Util.Auth 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.ShimAuth.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.ShimAuth.#ctor(Qiniu.Util.Auth)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.Util.Fakes.ShimAuth.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimAuth.AllInstances.CreateDownloadTokenString">
            <summary>设置 Auth.CreateDownloadToken(String url) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimAuth.AllInstances.CreateManageTokenString">
            <summary>设置 Auth.CreateManageToken(String url) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimAuth.AllInstances.CreateManageTokenStringByteArray">
            <summary>设置 Auth.CreateManageToken(String url, Byte[] body) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimAuth.AllInstances.CreateStreamManageTokenString">
            <summary>设置 Auth.CreateStreamManageToken(String data) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimAuth.AllInstances.CreateStreamPublishTokenString">
            <summary>设置 Auth.CreateStreamPublishToken(String path) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimAuth.AllInstances.CreateUploadTokenString">
            <summary>设置 Auth.CreateUploadToken(String jsonStr) 的 填充码</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.ShimAuth.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.ShimAuth.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimAuth.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimAuth.ConstructorMac">
            <summary>设置 Auth.Auth(Mac mac) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimAuth.CreateDownloadTokenMacString">
            <summary>设置 Auth.CreateDownloadToken(Mac mac, String url) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimAuth.CreateDownloadTokenString">
            <summary>设置 Auth.CreateDownloadToken(String url) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimAuth.CreateManageTokenMacString">
            <summary>设置 Auth.CreateManageToken(Mac mac, String url) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimAuth.CreateManageTokenMacStringByteArray">
            <summary>设置 Auth.CreateManageToken(Mac mac, String url, Byte[] body) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimAuth.CreateManageTokenString">
            <summary>设置 Auth.CreateManageToken(String url) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimAuth.CreateManageTokenStringByteArray">
            <summary>设置 Auth.CreateManageToken(String url, Byte[] body) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimAuth.CreateStreamManageTokenMacString">
            <summary>设置 Auth.CreateStreamManageToken(Mac mac, String data) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimAuth.CreateStreamManageTokenString">
            <summary>设置 Auth.CreateStreamManageToken(String data) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimAuth.CreateStreamPublishTokenMacString">
            <summary>设置 Auth.CreateStreamPublishToken(Mac mac, String path) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimAuth.CreateStreamPublishTokenString">
            <summary>设置 Auth.CreateStreamPublishToken(String path) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimAuth.CreateUploadTokenMacString">
            <summary>设置 Auth.CreateUploadToken(Mac mac, String jsonBody) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimAuth.CreateUploadTokenString">
            <summary>设置 Auth.CreateUploadToken(String jsonStr) 的 填充码</summary>
        </member>
        <member name="T:Qiniu.Util.Fakes.ShimBase64">
            <summary>Qiniu.Util.Base64 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.ShimBase64.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.ShimBase64.#ctor(Qiniu.Util.Base64)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.Util.Fakes.ShimBase64.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.ShimBase64.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.ShimBase64.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimBase64.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimBase64.Constructor">
            <summary>设置 Base64.Base64() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimBase64.UrlSafeBase64EncodeByteArray">
            <summary>设置 Base64.UrlSafeBase64Encode(Byte[] data) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimBase64.UrlSafeBase64EncodeString">
            <summary>设置 Base64.UrlSafeBase64Encode(String text) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimBase64.UrlSafeBase64EncodeStringString">
            <summary>设置 Base64.UrlSafeBase64Encode(String bucket, String key) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimBase64.UrlsafeBase64DecodeString">
            <summary>设置 Base64.UrlsafeBase64Decode(String text) 的 填充码</summary>
        </member>
        <member name="T:Qiniu.Util.Fakes.ShimCRC32">
            <summary>Qiniu.Util.CRC32 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.ShimCRC32.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.ShimCRC32.#ctor(Qiniu.Util.CRC32)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.Util.Fakes.ShimCRC32.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimCRC32.AllInstances.Sum">
            <summary>设置 CRC32.Sum() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimCRC32.AllInstances.WriteByteArrayInt32Int32">
            <summary>设置 CRC32.Write(Byte[] p, Int32 offset, Int32 count) 的 填充码</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.ShimCRC32.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.ShimCRC32.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimCRC32.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimCRC32.CheckSumBytesByteArray">
            <summary>设置 CRC32.CheckSumBytes(Byte[] data) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimCRC32.CheckSumSliceByteArrayInt32Int32">
            <summary>设置 CRC32.CheckSumSlice(Byte[] data, Int32 offset, Int32 count) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimCRC32.Constructor">
            <summary>设置 CRC32.CRC32() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimCRC32.Sum">
            <summary>设置 CRC32.Sum() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimCRC32.UpdateUInt32UInt32ArrayByteArrayInt32Int32">
            <summary>设置 CRC32.Update(UInt32 crc, UInt32[] table, Byte[] p, Int32 offset, Int32 count) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimCRC32.WriteByteArrayInt32Int32">
            <summary>设置 CRC32.Write(Byte[] p, Int32 offset, Int32 count) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimCRC32.checkSumFileString">
            <summary>设置 CRC32.checkSumFile(String filePath) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimCRC32.makeTableUInt32">
            <summary>设置 CRC32.makeTable(UInt32 poly) 的 填充码</summary>
        </member>
        <member name="T:Qiniu.Util.Fakes.ShimETag">
            <summary>Qiniu.Util.ETag 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.ShimETag.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.ShimETag.#ctor(Qiniu.Util.ETag)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.Util.Fakes.ShimETag.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.ShimETag.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.ShimETag.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimETag.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimETag.CalcHashString">
            <summary>设置 ETag.CalcHash(String filePath) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimETag.Constructor">
            <summary>设置 ETag.ETag() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimETag.StaticConstructor">
            <summary>设置 ETag.ETag() 的 填充码</summary>
        </member>
        <member name="T:Qiniu.Util.Fakes.ShimHashing">
            <summary>Qiniu.Util.Hashing 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.ShimHashing.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.ShimHashing.#ctor(Qiniu.Util.Hashing)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.Util.Fakes.ShimHashing.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.ShimHashing.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.ShimHashing.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimHashing.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimHashing.CalcMD5String">
            <summary>设置 Hashing.CalcMD5(String str) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimHashing.CalcMD5XString">
            <summary>设置 Hashing.CalcMD5X(String str) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimHashing.CalcSHA1ByteArray">
            <summary>设置 Hashing.CalcSHA1(Byte[] data) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimHashing.Constructor">
            <summary>设置 Hashing.Hashing() 的 填充码</summary>
        </member>
        <member name="T:Qiniu.Util.Fakes.ShimLabMD5">
            <summary>Qiniu.Util.LabMD5 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.ShimLabMD5.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.ShimLabMD5.#ctor(Qiniu.Util.LabMD5)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.Util.Fakes.ShimLabMD5.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimLabMD5.AllInstances.ComputeHashByteArray">
            <summary>设置 LabMD5.ComputeHash(Byte[] bytes) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimLabMD5.AllInstances.CopyBlockByteArrayUInt32">
            <summary>设置 LabMD5.CopyBlock(Byte[] bMsg, UInt32 block) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimLabMD5.AllInstances.CreatePaddedBufferByteArray">
            <summary>设置 LabMD5.CreatePaddedBuffer(Byte[] mes) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimLabMD5.AllInstances.FUInt32RefUInt32UInt32UInt32UInt32UInt16UInt32">
            <summary>设置 LabMD5.F(UInt32&amp; a, UInt32 b, UInt32 c, UInt32 d, UInt32 k, UInt16 s, UInt32 i) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimLabMD5.AllInstances.GUInt32RefUInt32UInt32UInt32UInt32UInt16UInt32">
            <summary>设置 LabMD5.G(UInt32&amp; a, UInt32 b, UInt32 c, UInt32 d, UInt32 k, UInt16 s, UInt32 i) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimLabMD5.AllInstances.HUInt32RefUInt32UInt32UInt32UInt32UInt16UInt32">
            <summary>设置 LabMD5.H(UInt32&amp; a, UInt32 b, UInt32 c, UInt32 d, UInt32 k, UInt16 s, UInt32 i) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimLabMD5.AllInstances.IUInt32RefUInt32UInt32UInt32UInt32UInt16UInt32">
            <summary>设置 LabMD5.I(UInt32&amp; a, UInt32 b, UInt32 c, UInt32 d, UInt32 k, UInt16 s, UInt32 i) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimLabMD5.AllInstances.TransformUInt32RefUInt32RefUInt32RefUInt32Ref">
            <summary>设置 LabMD5.Transform(UInt32&amp; A, UInt32&amp; B, UInt32&amp; C, UInt32&amp; D) 的 填充码</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.ShimLabMD5.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.ShimLabMD5.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimLabMD5.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimLabMD5.ComputeHashByteArray">
            <summary>设置 LabMD5.ComputeHash(Byte[] bytes) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimLabMD5.Constructor">
            <summary>设置 LabMD5.LabMD5() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimLabMD5.CopyBlockByteArrayUInt32">
            <summary>设置 LabMD5.CopyBlock(Byte[] bMsg, UInt32 block) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimLabMD5.CreatePaddedBufferByteArray">
            <summary>设置 LabMD5.CreatePaddedBuffer(Byte[] mes) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimLabMD5.StaticConstructor">
            <summary>设置 LabMD5.LabMD5() 的 填充码</summary>
        </member>
        <member name="T:Qiniu.Util.Fakes.ShimMac">
            <summary>Qiniu.Util.Mac 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.ShimMac.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.ShimMac.#ctor(Qiniu.Util.Mac)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimMac.AccessKeyGet">
            <summary>设置 Mac.get_AccessKey() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimMac.AccessKeySetString">
            <summary>设置 Mac.set_AccessKey(String value) 的 填充码</summary>
        </member>
        <member name="T:Qiniu.Util.Fakes.ShimMac.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimMac.AllInstances.AccessKeyGet">
            <summary>设置 Mac.get_AccessKey() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimMac.AllInstances.AccessKeySetString">
            <summary>设置 Mac.set_AccessKey(String value) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimMac.AllInstances.SecretKeyGet">
            <summary>设置 Mac.get_SecretKey() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimMac.AllInstances.SecretKeySetString">
            <summary>设置 Mac.set_SecretKey(String value) 的 填充码</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.ShimMac.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.ShimMac.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimMac.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimMac.ConstructorStringString">
            <summary>设置 Mac.Mac(String accessKey, String secretKey) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimMac.SecretKeyGet">
            <summary>设置 Mac.get_SecretKey() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimMac.SecretKeySetString">
            <summary>设置 Mac.set_SecretKey(String value) 的 填充码</summary>
        </member>
        <member name="T:Qiniu.Util.Fakes.ShimSignature">
            <summary>Qiniu.Util.Signature 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.ShimSignature.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.ShimSignature.#ctor(Qiniu.Util.Signature)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.Util.Fakes.ShimSignature.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimSignature.AllInstances.SignByteArray">
            <summary>设置 Signature.Sign(Byte[] data) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimSignature.AllInstances.SignRequestStringByteArray">
            <summary>设置 Signature.SignRequest(String url, Byte[] body) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimSignature.AllInstances.SignRequestStringString">
            <summary>设置 Signature.SignRequest(String url, String body) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimSignature.AllInstances.SignString">
            <summary>设置 Signature.Sign(String str) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimSignature.AllInstances.SignWithDataByteArray">
            <summary>设置 Signature.SignWithData(Byte[] data) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimSignature.AllInstances.SignWithDataString">
            <summary>设置 Signature.SignWithData(String str) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimSignature.AllInstances.encodedSignByteArray">
            <summary>设置 Signature.encodedSign(Byte[] data) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimSignature.AllInstances.encodedSignString">
            <summary>设置 Signature.encodedSign(String str) 的 填充码</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.ShimSignature.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.ShimSignature.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimSignature.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimSignature.ConstructorMac">
            <summary>设置 Signature.Signature(Mac mac) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimSignature.SignByteArray">
            <summary>设置 Signature.Sign(Byte[] data) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimSignature.SignRequestStringByteArray">
            <summary>设置 Signature.SignRequest(String url, Byte[] body) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimSignature.SignRequestStringString">
            <summary>设置 Signature.SignRequest(String url, String body) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimSignature.SignString">
            <summary>设置 Signature.Sign(String str) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimSignature.SignWithDataByteArray">
            <summary>设置 Signature.SignWithData(Byte[] data) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimSignature.SignWithDataString">
            <summary>设置 Signature.SignWithData(String str) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimSignature.encodedSignByteArray">
            <summary>设置 Signature.encodedSign(Byte[] data) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimSignature.encodedSignString">
            <summary>设置 Signature.encodedSign(String str) 的 填充码</summary>
        </member>
        <member name="T:Qiniu.Util.Fakes.ShimStringHelper">
            <summary>Qiniu.Util.StringHelper 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.ShimStringHelper.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.ShimStringHelper.#ctor(Qiniu.Util.StringHelper)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.Util.Fakes.ShimStringHelper.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.ShimStringHelper.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.ShimStringHelper.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimStringHelper.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimStringHelper.Constructor">
            <summary>设置 StringHelper.StringHelper() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimStringHelper.UrlEncodeString">
            <summary>设置 StringHelper.UrlEncode(String text) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimStringHelper.UrlFormEncodeDictionaryOfStringString">
            <summary>设置 StringHelper.UrlFormEncode(Dictionary`2&lt;String,String&gt; values) 的 填充码</summary>
        </member>
        <member name="T:Qiniu.Util.Fakes.ShimUnixTimestamp">
            <summary>Qiniu.Util.UnixTimestamp 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.ShimUnixTimestamp.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.ShimUnixTimestamp.#ctor(Qiniu.Util.UnixTimestamp)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.Util.Fakes.ShimUnixTimestamp.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.ShimUnixTimestamp.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.ShimUnixTimestamp.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimUnixTimestamp.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimUnixTimestamp.Constructor">
            <summary>设置 UnixTimestamp.UnixTimestamp() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimUnixTimestamp.ConvertToDateTimeInt64">
            <summary>设置 UnixTimestamp.ConvertToDateTime(Int64 timestamp) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimUnixTimestamp.ConvertToDateTimeString">
            <summary>设置 UnixTimestamp.ConvertToDateTime(String timestamp) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimUnixTimestamp.ConvertToTimestampDateTime">
            <summary>设置 UnixTimestamp.ConvertToTimestamp(DateTime dt) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimUnixTimestamp.GetUnixTimestampInt64">
            <summary>设置 UnixTimestamp.GetUnixTimestamp(Int64 secondsAfterNow) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimUnixTimestamp.IsContextExpiredInt64">
            <summary>设置 UnixTimestamp.IsContextExpired(Int64 expiredAt) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimUnixTimestamp.StaticConstructor">
            <summary>设置 UnixTimestamp.UnixTimestamp() 的 填充码</summary>
        </member>
        <member name="T:Qiniu.Util.Fakes.ShimUpToken">
            <summary>Qiniu.Util.UpToken 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.ShimUpToken.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.ShimUpToken.#ctor(Qiniu.Util.UpToken)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.Util.Fakes.ShimUpToken.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.ShimUpToken.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.ShimUpToken.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimUpToken.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimUpToken.Constructor">
            <summary>设置 UpToken.UpToken() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimUpToken.GetAccessKeyFromUpTokenString">
            <summary>设置 UpToken.GetAccessKeyFromUpToken(String upToken) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimUpToken.GetBucketFromUpTokenString">
            <summary>设置 UpToken.GetBucketFromUpToken(String upToken) 的 填充码</summary>
        </member>
        <member name="T:Qiniu.Util.Fakes.ShimUrlHelper">
            <summary>Qiniu.Util.UrlHelper 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.ShimUrlHelper.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.ShimUrlHelper.#ctor(Qiniu.Util.UrlHelper)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.Util.Fakes.ShimUrlHelper.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.ShimUrlHelper.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.ShimUrlHelper.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimUrlHelper.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimUrlHelper.Constructor">
            <summary>设置 UrlHelper.UrlHelper() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimUrlHelper.GetNormalUrlString">
            <summary>设置 UrlHelper.GetNormalUrl(String _url) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimUrlHelper.IsNormalUrlString">
            <summary>设置 UrlHelper.IsNormalUrl(String _url) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimUrlHelper.IsValidDirString">
            <summary>设置 UrlHelper.IsValidDir(String _dir) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimUrlHelper.IsValidUrlString">
            <summary>设置 UrlHelper.IsValidUrl(String _url) 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimUrlHelper.StaticConstructor">
            <summary>设置 UrlHelper.UrlHelper() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimUrlHelper.UrlSplitStringStringOutStringOutStringOutStringOut">
            <summary>设置 UrlHelper.UrlSplit(String url, String&amp; host, String&amp; path, String&amp; file, String&amp; query) 的 填充码</summary>
        </member>
        <member name="T:Qiniu.Util.Fakes.ShimUserEnv">
            <summary>Qiniu.Util.UserEnv 的填充码类型</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.ShimUserEnv.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.ShimUserEnv.#ctor(Qiniu.Util.UserEnv)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Qiniu.Util.Fakes.ShimUserEnv.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.ShimUserEnv.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.ShimUserEnv.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimUserEnv.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimUserEnv.Constructor">
            <summary>设置 UserEnv.UserEnv() 的 填充码</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.ShimUserEnv.GetHomeFolder">
            <summary>设置 UserEnv.GetHomeFolder() 的 填充码</summary>
        </member>
        <member name="T:Qiniu.Util.Fakes.StubAuth">
            <summary>Qiniu.Util.Auth 的存根类型</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.StubAuth.#ctor(Qiniu.Util.Mac)">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.StubAuth.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.StubAuth.InitializeStub">
            <summary>初始化 type StubAuth 的新实例</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.StubAuth.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.StubAuth.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Qiniu.Util.Fakes.StubBase64">
            <summary>Qiniu.Util.Base64 的存根类型</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.StubBase64.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.StubBase64.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.StubBase64.InitializeStub">
            <summary>初始化 type StubBase64 的新实例</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.StubBase64.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.StubBase64.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Qiniu.Util.Fakes.StubCRC32">
            <summary>Qiniu.Util.CRC32 的存根类型</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.StubCRC32.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.StubCRC32.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.StubCRC32.InitializeStub">
            <summary>初始化 type StubCRC32 的新实例</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.StubCRC32.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.StubCRC32.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Qiniu.Util.Fakes.StubETag">
            <summary>Qiniu.Util.ETag 的存根类型</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.StubETag.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.StubETag.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.StubETag.InitializeStub">
            <summary>初始化 type StubETag 的新实例</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.StubETag.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.StubETag.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Qiniu.Util.Fakes.StubHashing">
            <summary>Qiniu.Util.Hashing 的存根类型</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.StubHashing.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.StubHashing.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.StubHashing.InitializeStub">
            <summary>初始化 type StubHashing 的新实例</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.StubHashing.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.StubHashing.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Qiniu.Util.Fakes.StubLabMD5">
            <summary>Qiniu.Util.LabMD5 的存根类型</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.StubLabMD5.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.StubLabMD5.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.StubLabMD5.InitializeStub">
            <summary>初始化 type StubLabMD5 的新实例</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.StubLabMD5.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.StubLabMD5.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Qiniu.Util.Fakes.StubMac">
            <summary>Qiniu.Util.Mac 的存根类型</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.StubMac.#ctor(System.String,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.StubMac.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.StubMac.InitializeStub">
            <summary>初始化 type StubMac 的新实例</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.StubMac.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.StubMac.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Qiniu.Util.Fakes.StubSignature">
            <summary>Qiniu.Util.Signature 的存根类型</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.StubSignature.#ctor(Qiniu.Util.Mac)">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.StubSignature.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.StubSignature.InitializeStub">
            <summary>初始化 type StubSignature 的新实例</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.StubSignature.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.StubSignature.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Qiniu.Util.Fakes.StubStringHelper">
            <summary>Qiniu.Util.StringHelper 的存根类型</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.StubStringHelper.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.StubStringHelper.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.StubStringHelper.InitializeStub">
            <summary>初始化 type StubStringHelper 的新实例</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.StubStringHelper.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.StubStringHelper.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Qiniu.Util.Fakes.StubUnixTimestamp">
            <summary>Qiniu.Util.UnixTimestamp 的存根类型</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.StubUnixTimestamp.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.StubUnixTimestamp.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.StubUnixTimestamp.InitializeStub">
            <summary>初始化 type StubUnixTimestamp 的新实例</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.StubUnixTimestamp.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.StubUnixTimestamp.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Qiniu.Util.Fakes.StubUpToken">
            <summary>Qiniu.Util.UpToken 的存根类型</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.StubUpToken.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.StubUpToken.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.StubUpToken.InitializeStub">
            <summary>初始化 type StubUpToken 的新实例</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.StubUpToken.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.StubUpToken.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Qiniu.Util.Fakes.StubUrlHelper">
            <summary>Qiniu.Util.UrlHelper 的存根类型</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.StubUrlHelper.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.StubUrlHelper.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.StubUrlHelper.InitializeStub">
            <summary>初始化 type StubUrlHelper 的新实例</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.StubUrlHelper.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.StubUrlHelper.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Qiniu.Util.Fakes.StubUserEnv">
            <summary>Qiniu.Util.UserEnv 的存根类型</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.StubUserEnv.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.StubUserEnv.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Qiniu.Util.Fakes.StubUserEnv.InitializeStub">
            <summary>初始化 type StubUserEnv 的新实例</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.StubUserEnv.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Qiniu.Util.Fakes.StubUserEnv.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
    </members>
</doc>
